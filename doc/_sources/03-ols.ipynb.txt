{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling with linear regression\n",
    "\n",
    "In this section, we will cover:\n",
    "\n",
    "- fitting different linear repression models\n",
    "- score analysis: MSE and variance explained: $R^2$\n",
    "- residual analysis\n",
    "- analysis of fitted values distribution\n",
    "- most important features\n",
    "- comparing the models: conclusions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symboling</th>\n",
       "      <th>make</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>aspiration</th>\n",
       "      <th>num_of_doors</th>\n",
       "      <th>body_style</th>\n",
       "      <th>drive_wheels</th>\n",
       "      <th>engine_location</th>\n",
       "      <th>wheel_base</th>\n",
       "      <th>length</th>\n",
       "      <th>...</th>\n",
       "      <th>engine_size</th>\n",
       "      <th>fuel_system</th>\n",
       "      <th>bore</th>\n",
       "      <th>stroke</th>\n",
       "      <th>compression_ratio</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>peak_rpm</th>\n",
       "      <th>city_mpg</th>\n",
       "      <th>highway_mpg</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>mitsubishi</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>96.3</td>\n",
       "      <td>172.4</td>\n",
       "      <td>...</td>\n",
       "      <td>122</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.46</td>\n",
       "      <td>8.5</td>\n",
       "      <td>88.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>25</td>\n",
       "      <td>32</td>\n",
       "      <td>6989.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>diesel</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>...</td>\n",
       "      <td>97</td>\n",
       "      <td>idi</td>\n",
       "      <td>3.01</td>\n",
       "      <td>3.40</td>\n",
       "      <td>23.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4800.0</td>\n",
       "      <td>37</td>\n",
       "      <td>46</td>\n",
       "      <td>7775.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>bmw</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>110.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>...</td>\n",
       "      <td>209</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.62</td>\n",
       "      <td>3.39</td>\n",
       "      <td>8.0</td>\n",
       "      <td>182.0</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>15</td>\n",
       "      <td>20</td>\n",
       "      <td>36880.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>mazda</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>93.1</td>\n",
       "      <td>159.1</td>\n",
       "      <td>...</td>\n",
       "      <td>91</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>3.03</td>\n",
       "      <td>3.15</td>\n",
       "      <td>9.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>30</td>\n",
       "      <td>31</td>\n",
       "      <td>5195.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>mitsubishi</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>93.7</td>\n",
       "      <td>157.3</td>\n",
       "      <td>...</td>\n",
       "      <td>92</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>2.97</td>\n",
       "      <td>3.23</td>\n",
       "      <td>9.4</td>\n",
       "      <td>68.0</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>31</td>\n",
       "      <td>38</td>\n",
       "      <td>6189.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   symboling        make fuel_type aspiration num_of_doors body_style  \\\n",
       "0          1  mitsubishi       gas        std         four      sedan   \n",
       "1          2  volkswagen    diesel        std          two      sedan   \n",
       "2          0         bmw       gas        std         four      sedan   \n",
       "3          1       mazda       gas        std          two  hatchback   \n",
       "4          2  mitsubishi       gas        std          two  hatchback   \n",
       "\n",
       "  drive_wheels engine_location  wheel_base  length  ...  engine_size  \\\n",
       "0          fwd           front        96.3   172.4  ...          122   \n",
       "1          fwd           front        97.3   171.7  ...           97   \n",
       "2          rwd           front       110.0   197.0  ...          209   \n",
       "3          fwd           front        93.1   159.1  ...           91   \n",
       "4          fwd           front        93.7   157.3  ...           92   \n",
       "\n",
       "   fuel_system  bore stroke compression_ratio  horsepower peak_rpm  city_mpg  \\\n",
       "0         2bbl  3.35   3.46               8.5        88.0   5000.0        25   \n",
       "1          idi  3.01   3.40              23.0        52.0   4800.0        37   \n",
       "2         mpfi  3.62   3.39               8.0       182.0   5400.0        15   \n",
       "3         2bbl  3.03   3.15               9.0        68.0   5000.0        30   \n",
       "4         2bbl  2.97   3.23               9.4        68.0   5500.0        31   \n",
       "\n",
       "   highway_mpg    price  \n",
       "0           32   6989.0  \n",
       "1           46   7775.0  \n",
       "2           20  36880.0  \n",
       "3           31   5195.0  \n",
       "4           38   6189.0  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('df_resample.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.copy()\n",
    "X.drop('price', axis=1, inplace=True)\n",
    "y = np.log(df.price) # as discussed, we are going to use the log transform here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train-test split\n",
    "\n",
    "To validate out model, lets split the data on train and test sets, so we can evaluate the predictions on the test set later.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# now the split in a stratified way\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=.3, random_state=95276\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['wheel_base',\n",
       " 'length',\n",
       " 'width',\n",
       " 'height',\n",
       " 'curb_weight',\n",
       " 'engine_size',\n",
       " 'bore',\n",
       " 'stroke',\n",
       " 'compression_ratio',\n",
       " 'horsepower',\n",
       " 'peak_rpm',\n",
       " 'city_mpg',\n",
       " 'highway_mpg']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "import pickle\n",
    "\n",
    "with open('category_list', 'rb') as file:\n",
    "    cat_cols = pickle.load(file)\n",
    "\n",
    "# numeric columns\n",
    "num_cols = [col for col in X_train.columns if col not in cat_cols]\n",
    "num_cols"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Selection\n",
    "\n",
    "This is the proper way of fitting a OLS model: carefully choosing which feature will be included into the model, because:\n",
    "\n",
    "- including unnecessary features (that are correlated to the features already in the model) increases the standard error of the coefficients\n",
    "- excluding necessary features results in bias\n",
    "\n",
    "So lets chose only numeric features which are correlated to the price:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\BJ571WQ\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "length         0.778576\n",
       "city_mpg       0.796573\n",
       "highway_mpg    0.797305\n",
       "width          0.798628\n",
       "horsepower     0.839862\n",
       "engine_size    0.856983\n",
       "curb_weight    0.892790\n",
       "price          1.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train['price'] = y_train\n",
    "cols = num_cols + ['price']\n",
    "cor = X_train[cols].corr().abs()\n",
    "cor.loc[cor.price > .7, 'price'].sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "correlated:  Index(['length', 'city_mpg', 'highway_mpg', 'width', 'horsepower',\n",
      "       'engine_size', 'curb_weight'],\n",
      "      dtype='object')\n",
      "not correlated:  ['wheel_base', 'height', 'bore', 'stroke', 'compression_ratio', 'peak_rpm']\n"
     ]
    }
   ],
   "source": [
    "mask = (cor.price > .7 ) & (cor.price < 1)\n",
    "correlated = cor[mask].sort_values(by='price').index\n",
    "not_correlated = [col for col in num_cols if col not in correlated]\n",
    "\n",
    "print('correlated: ', correlated)\n",
    "print('not correlated: ', not_correlated)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Formula for OLS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'price ~ C(make) + C(fuel_type) + C(aspiration) + C(num_of_doors) + C(body_style) + C(drive_wheels) + C(engine_location) + C(engine_type) + C(num_of_cylinders) + C(fuel_system) + C(symboling) + length + city_mpg + highway_mpg + width + horsepower + engine_size + curb_weight'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_list = [f'C({cat})' for cat in cat_cols]\n",
    "cat_formula = ' + '.join(cat_list)\n",
    "num_formula = ' + '.join(correlated)\n",
    "\n",
    "formula = f'price ~ {cat_formula} + {num_formula}'\n",
    "formula"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.969\n",
      "Model:                            OLS   Adj. R-squared:                  0.969\n",
      "Method:                 Least Squares   F-statistic:                     4107.\n",
      "Date:                Sun, 28 Jun 2020   Prob (F-statistic):               0.00\n",
      "Time:                        17:32:27   Log-Likelihood:                 6863.9\n",
      "No. Observations:                7000   AIC:                        -1.362e+04\n",
      "Df Residuals:                    6946   BIC:                        -1.325e+04\n",
      "Df Model:                          53                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=================================================================================================\n",
      "                                    coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------------------\n",
      "Intercept                         4.7173      0.071     66.377      0.000       4.578       4.857\n",
      "C(make)[T.audi]                   0.2932      0.020     14.557      0.000       0.254       0.333\n",
      "C(make)[T.bmw]                    0.3137      0.016     19.835      0.000       0.283       0.345\n",
      "C(make)[T.chevrolet]             -0.0987      0.017     -5.978      0.000      -0.131      -0.066\n",
      "C(make)[T.dodge]                 -0.1483      0.014    -10.901      0.000      -0.175      -0.122\n",
      "C(make)[T.honda]                  0.1203      0.018      6.777      0.000       0.086       0.155\n",
      "C(make)[T.isuzu]                 -0.4742      0.022    -21.219      0.000      -0.518      -0.430\n",
      "C(make)[T.jaguar]                -0.0965      0.021     -4.524      0.000      -0.138      -0.055\n",
      "C(make)[T.mazda]                 -0.0645      0.013     -4.962      0.000      -0.090      -0.039\n",
      "C(make)[T.mercedes-benz]          0.0044      0.021      0.211      0.833      -0.036       0.045\n",
      "C(make)[T.mercury]               -0.1400      0.021     -6.739      0.000      -0.181      -0.099\n",
      "C(make)[T.mitsubishi]            -0.1640      0.014    -11.694      0.000      -0.192      -0.137\n",
      "C(make)[T.nissan]                -0.0381      0.012     -3.118      0.002      -0.062      -0.014\n",
      "C(make)[T.peugot]                -0.1930      0.015    -12.885      0.000      -0.222      -0.164\n",
      "C(make)[T.plymouth]              -0.1831      0.014    -13.523      0.000      -0.210      -0.157\n",
      "C(make)[T.porsche]                0.2422      0.021     11.324      0.000       0.200       0.284\n",
      "C(make)[T.saab]                   0.1197      0.016      7.334      0.000       0.088       0.152\n",
      "C(make)[T.subaru]                -0.2343      0.013    -18.044      0.000      -0.260      -0.209\n",
      "C(make)[T.toyota]                -0.1809      0.012    -15.201      0.000      -0.204      -0.158\n",
      "C(make)[T.volkswagen]            -0.0348      0.015     -2.397      0.017      -0.063      -0.006\n",
      "C(make)[T.volvo]                 -0.0561      0.015     -3.749      0.000      -0.085      -0.027\n",
      "C(fuel_type)[T.gas]               2.2437      0.035     63.478      0.000       2.174       2.313\n",
      "C(aspiration)[T.turbo]            0.1246      0.006     19.169      0.000       0.112       0.137\n",
      "C(num_of_doors)[T.two]           -0.0228      0.004     -5.128      0.000      -0.032      -0.014\n",
      "C(body_style)[T.hardtop]         -0.1183      0.010    -11.744      0.000      -0.138      -0.099\n",
      "C(body_style)[T.hatchback]       -0.1560      0.009    -16.973      0.000      -0.174      -0.138\n",
      "C(body_style)[T.sedan]           -0.1610      0.010    -15.851      0.000      -0.181      -0.141\n",
      "C(body_style)[T.wagon]           -0.2284      0.011    -21.195      0.000      -0.250      -0.207\n",
      "C(drive_wheels)[T.rwd]            0.1557      0.007     23.356      0.000       0.143       0.169\n",
      "C(engine_location)[T.rear]        0.2896      0.016     17.870      0.000       0.258       0.321\n",
      "C(engine_type)[T.l]              -0.1625      0.012    -13.379      0.000      -0.186      -0.139\n",
      "C(engine_type)[T.ohc]            -0.0325      0.009     -3.762      0.000      -0.049      -0.016\n",
      "C(engine_type)[T.ohcf]            0.0553      0.008      6.732      0.000       0.039       0.071\n",
      "C(engine_type)[T.ohcv]           -0.1271      0.011    -11.982      0.000      -0.148      -0.106\n",
      "C(num_of_cylinders)[T.five]      -0.3049      0.019    -15.750      0.000      -0.343      -0.267\n",
      "C(num_of_cylinders)[T.four]      -0.2728      0.024    -11.319      0.000      -0.320      -0.226\n",
      "C(num_of_cylinders)[T.six]       -0.2525      0.022    -11.740      0.000      -0.295      -0.210\n",
      "C(num_of_cylinders)[T.three]      0.0305      0.022      1.393      0.164      -0.012       0.073\n",
      "C(num_of_cylinders)[T.twelve]    -0.1096      0.031     -3.480      0.001      -0.171      -0.048\n",
      "C(fuel_system)[T.2bbl]            0.1739      0.013     13.176      0.000       0.148       0.200\n",
      "C(fuel_system)[T.idi]             2.4736      0.037     66.486      0.000       2.401       2.547\n",
      "C(fuel_system)[T.mfi]             0.2207      0.023      9.392      0.000       0.175       0.267\n",
      "C(fuel_system)[T.mpfi]            0.2554      0.014     18.310      0.000       0.228       0.283\n",
      "C(fuel_system)[T.spdi]            0.1995      0.016     12.279      0.000       0.168       0.231\n",
      "C(fuel_system)[T.spfi]            0.5440      0.028     19.576      0.000       0.490       0.598\n",
      "C(symboling)[T.-1]                0.1320      0.012     11.435      0.000       0.109       0.155\n",
      "C(symboling)[T.0]                 0.1301      0.013     10.064      0.000       0.105       0.155\n",
      "C(symboling)[T.1]                 0.0504      0.013      3.743      0.000       0.024       0.077\n",
      "C(symboling)[T.2]                 0.0036      0.014      0.258      0.797      -0.024       0.031\n",
      "C(symboling)[T.3]                 0.0673      0.015      4.554      0.000       0.038       0.096\n",
      "length                           -0.0014      0.000     -3.645      0.000      -0.002      -0.001\n",
      "city_mpg                         -0.0180      0.001    -15.776      0.000      -0.020      -0.016\n",
      "highway_mpg                       0.0129      0.001     13.158      0.000       0.011       0.015\n",
      "width                             0.0242      0.002     12.144      0.000       0.020       0.028\n",
      "horsepower                    -6.363e-06      0.000     -0.036      0.972      -0.000       0.000\n",
      "engine_size                       0.0011      0.000      7.112      0.000       0.001       0.001\n",
      "curb_weight                       0.0004   1.23e-05     35.345      0.000       0.000       0.000\n",
      "==============================================================================\n",
      "Omnibus:                       12.442   Durbin-Watson:                   1.994\n",
      "Prob(Omnibus):                  0.002   Jarque-Bera (JB):               12.433\n",
      "Skew:                          -0.100   Prob(JB):                      0.00200\n",
      "Kurtosis:                       3.050   Cond. No.                     1.02e+16\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The smallest eigenvalue is 4.65e-22. This might indicate that there are\n",
      "strong multicollinearity problems or that the design matrix is singular.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "\n",
    "model = smf.ols(formula=formula, data=X_train)\n",
    "res = model.fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Scoring & Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R^2: 0.9688\n"
     ]
    }
   ],
   "source": [
    "r2 = res.rsquared_adj\n",
    "print(f'R^2: {r2:.4}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE: 2.098e+06\n"
     ]
    }
   ],
   "source": [
    "predictions = np.exp(res.predict(X_test)) # back transformation\n",
    "\n",
    "mse = np.mean(\n",
    "    (predictions - np.exp(y_test))**2\n",
    ")\n",
    "print(f'MSE: {mse:.4}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model name</th>\n",
       "      <th>r2</th>\n",
       "      <th>MSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ols</td>\n",
       "      <td>0.968839</td>\n",
       "      <td>2.098474e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  model name        r2           MSE\n",
       "0        ols  0.968839  2.098474e+06"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = {\n",
    "    'model name': ['ols'],\n",
    "    'r2': [r2],\n",
    "    'MSE': [mse]\n",
    "       }\n",
    "\n",
    "score_df = pd.DataFrame(data)\n",
    "score_df.to_csv('scores.csv')\n",
    "score_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With an adjusted $R^2$ score of 0.9691 we can say that it is a really good model already!\n",
    "\n",
    "\n",
    "## Feature selection through p-values\n",
    "\n",
    "When we fit a linear regression model, we have to test the hypothesis that the evaluated coefficients for each regressor is actually zero.\n",
    "\n",
    "In other words, we have:\n",
    "\n",
    "- $H_0$: the coefficient is zero\n",
    "- $H_1$ : the coefficient is not zero\n",
    "\n",
    "Therefore, let's look into the p-values for each coefficient for each regressor to see if they shouldn't be zero:\n",
    "\n",
    "*if a p-value of a given coefficient is larger than 5%, then we fail to reject the null hypothesis that the coefficient actually is zero*\n",
    "\n",
    "However, all p-values here are smaller than 5%, so no additional feature selection will be done."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "C(make)[T.mercedes-benz]        0.833019\n",
       "C(num_of_cylinders)[T.three]    0.163597\n",
       "C(symboling)[T.2]               0.796757\n",
       "horsepower                      0.971511\n",
       "dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.pvalues[res.pvalues>.05]\n",
    "# we are not taking out make just because a few rotten apples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Residual analysis\n",
    "\n",
    "In a good model, what we should expect from the residuals:\n",
    "- their mean should be zero\n",
    "- they should be homoscedastic\n",
    "- they should be normal\n",
    "- they should have no correlation with the fitted values\n",
    "- they should have no correlation with any of the features\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Residual mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-4.826902052660183e-13"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.resid.mean() # good!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Residuals vs fitted values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1b99ea07d48>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from numpy.polynomial.polynomial import polyfit\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "plt.figure(figsize=(5, 5))\n",
    "plt.title('fitted price vs resids')\n",
    "plt.scatter(res.fittedvalues, res.resid, c=\"g\", alpha=0.5, label=\"OLS model\")\n",
    "b, m = polyfit(res.fittedvalues, res.resid, 1)\n",
    "plt.plot(res.fittedvalues, b + m * res.fittedvalues, '-')\n",
    "plt.xlabel(\"\")\n",
    "plt.ylabel(\"\")\n",
    "plt.legend(loc=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correlation between residuals and $\\hat y$\n",
    "\n",
    "In a good model, residuals cannot be correlated to the fitted values. \n",
    "\n",
    "We have already saw before that the Ridge is ok in his regard:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-8.759130573632312e-13, 0.9999999999451344)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats.stats import pearsonr\n",
    "pearsonr(res.predict(X_train), res.resid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Most important features\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coefs_abs</th>\n",
       "      <th>coef_value</th>\n",
       "      <th>feats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>4.72</td>\n",
       "      <td>4.72</td>\n",
       "      <td>Intercept</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(fuel_system)[T.idi]</th>\n",
       "      <td>2.47</td>\n",
       "      <td>2.47</td>\n",
       "      <td>C(fuel_system)[T.idi]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(fuel_type)[T.gas]</th>\n",
       "      <td>2.24</td>\n",
       "      <td>2.24</td>\n",
       "      <td>C(fuel_type)[T.gas]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(fuel_system)[T.spfi]</th>\n",
       "      <td>0.54</td>\n",
       "      <td>0.54</td>\n",
       "      <td>C(fuel_system)[T.spfi]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(make)[T.isuzu]</th>\n",
       "      <td>0.47</td>\n",
       "      <td>-0.47</td>\n",
       "      <td>C(make)[T.isuzu]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(make)[T.bmw]</th>\n",
       "      <td>0.31</td>\n",
       "      <td>0.31</td>\n",
       "      <td>C(make)[T.bmw]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(num_of_cylinders)[T.five]</th>\n",
       "      <td>0.30</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>C(num_of_cylinders)[T.five]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(engine_location)[T.rear]</th>\n",
       "      <td>0.29</td>\n",
       "      <td>0.29</td>\n",
       "      <td>C(engine_location)[T.rear]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(make)[T.audi]</th>\n",
       "      <td>0.29</td>\n",
       "      <td>0.29</td>\n",
       "      <td>C(make)[T.audi]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(num_of_cylinders)[T.four]</th>\n",
       "      <td>0.27</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>C(num_of_cylinders)[T.four]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             coefs_abs  coef_value  \\\n",
       "Intercept                         4.72        4.72   \n",
       "C(fuel_system)[T.idi]             2.47        2.47   \n",
       "C(fuel_type)[T.gas]               2.24        2.24   \n",
       "C(fuel_system)[T.spfi]            0.54        0.54   \n",
       "C(make)[T.isuzu]                  0.47       -0.47   \n",
       "C(make)[T.bmw]                    0.31        0.31   \n",
       "C(num_of_cylinders)[T.five]       0.30       -0.30   \n",
       "C(engine_location)[T.rear]        0.29        0.29   \n",
       "C(make)[T.audi]                   0.29        0.29   \n",
       "C(num_of_cylinders)[T.four]       0.27       -0.27   \n",
       "\n",
       "                                                   feats  \n",
       "Intercept                                      Intercept  \n",
       "C(fuel_system)[T.idi]              C(fuel_system)[T.idi]  \n",
       "C(fuel_type)[T.gas]                  C(fuel_type)[T.gas]  \n",
       "C(fuel_system)[T.spfi]            C(fuel_system)[T.spfi]  \n",
       "C(make)[T.isuzu]                        C(make)[T.isuzu]  \n",
       "C(make)[T.bmw]                            C(make)[T.bmw]  \n",
       "C(num_of_cylinders)[T.five]  C(num_of_cylinders)[T.five]  \n",
       "C(engine_location)[T.rear]    C(engine_location)[T.rear]  \n",
       "C(make)[T.audi]                          C(make)[T.audi]  \n",
       "C(num_of_cylinders)[T.four]  C(num_of_cylinders)[T.four]  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = res.pvalues[res.pvalues < .05].index\n",
    "coefs = res.params[index]\n",
    "df_coef_ols = pd.DataFrame({'coefs_abs': np.abs(np.round(coefs,2)),\n",
    "                            'coef_value': np.round(coefs,2),\n",
    "                            'feats': coefs.index})\n",
    "\n",
    "df_coef_ols[~df_coef_ols.feats.str.startswith('make')].sort_values('coefs_abs', ascending=False).head(10)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
