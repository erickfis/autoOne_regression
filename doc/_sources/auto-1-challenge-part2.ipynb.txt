{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Auto-1 Data Science Challenge"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 2 - Modeling\n",
    "\n",
    "In this section, we will cover:\n",
    "\n",
    "- analysis of sample distribution\n",
    "- fitting different linear repression models\n",
    "- analysis of variance explained: $R^2$\n",
    "- analysis of MSE - mean squared error\n",
    "- residual analysis\n",
    "- analysis of fitted values distribution\n",
    "- most important features\n",
    "- comparing the models: conclusions\n",
    "- improving the model\n",
    "- using the model to predict NA prices\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "normalized_losses    38\n",
       "price                 4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# preparing the data\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df = pd.read_pickle('df_clean.pkl')\n",
    "df.isnull().sum()[df.isnull().sum()>0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis of sample distribution\n",
    "\n",
    "Before splitting train and test, let's look out how balanced the data is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7efc3b84e1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "fig, (ax, ax2) = plt.subplots(ncols=2, sharey=False)\n",
    "\n",
    "df.price.plot(kind='kde', legend=False, ax=ax,  figsize=(14,7))\n",
    "df.price.plot(kind='hist',ax=ax2, figsize=(14,7))\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7efc2a129eb8>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7efc3b821ba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.price.plot(kind='box', legend=False, figsize=(5,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the density plot, it looks like our data follows a *bimodal distribution*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      193.000000\n",
       "mean     13285.025907\n",
       "std       8089.082886\n",
       "min       5118.000000\n",
       "25%       7738.000000\n",
       "50%      10245.000000\n",
       "75%      16515.000000\n",
       "max      45400.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.price.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29680.5"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_wisker = df.price.quantile(.75) + 1.5*(df.price.quantile(.75) - df.price.quantile(.25))\n",
    "top_wisker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.021338141309260816"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# prob for y > top_wisker\n",
    "import scipy.stats as st\n",
    "1- st.norm.cdf(top_wisker, df.price.mean(), df.price.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32103.046680808613"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st.norm.ppf(.99, df.price.mean(), df.price.std()) # just exploring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.98965540725691292"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st.norm.cdf(32000, df.price.mean(), df.price.std()) # just exploring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class_range</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>super-cheap</td>\n",
       "      <td>14869.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>rich_only</td>\n",
       "      <td>45400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>almost_free</td>\n",
       "      <td>8948.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>super-cheap</td>\n",
       "      <td>16515.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>almost_free</td>\n",
       "      <td>9279.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>super-cheap</td>\n",
       "      <td>11900.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>super-cheap</td>\n",
       "      <td>13845.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>almost_free</td>\n",
       "      <td>8499.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>cheap</td>\n",
       "      <td>17669.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     class_range    price\n",
       "83   super-cheap  14869.0\n",
       "74     rich_only  45400.0\n",
       "44           NaN      NaN\n",
       "173  almost_free   8948.0\n",
       "197  super-cheap  16515.0\n",
       "88   almost_free   9279.0\n",
       "107  super-cheap  11900.0\n",
       "192  super-cheap  13845.0\n",
       "81   almost_free   8499.0\n",
       "172        cheap  17669.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df[\"class_range\"] = pd.cut(df.price, 7, \n",
    "                               labels=['almost_free', 'super-cheap', 'cheap', 'normal', 'expensive', \n",
    "                                       'super_expensive', 'rich_only'])\n",
    "\n",
    "df[['class_range', 'price']].sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>class_range</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>almost_free</th>\n",
       "      <td>5118.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>super-cheap</th>\n",
       "      <td>10898.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cheap</th>\n",
       "      <td>16630.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>normal</th>\n",
       "      <td>22470.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>expensive</th>\n",
       "      <td>28176.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>super_expensive</th>\n",
       "      <td>34028.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rich_only</th>\n",
       "      <td>40960.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   price\n",
       "class_range             \n",
       "almost_free       5118.0\n",
       "super-cheap      10898.0\n",
       "cheap            16630.0\n",
       "normal           22470.0\n",
       "expensive        28176.0\n",
       "super_expensive  34028.0\n",
       "rich_only        40960.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('class_range')[['price']] .min() # starting prices for each class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "almost_free        101\n",
       "super-cheap         45\n",
       "cheap               26\n",
       "super_expensive      7\n",
       "expensive            6\n",
       "normal               5\n",
       "rich_only            3\n",
       "Name: class_range, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.class_range.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7efc2a2cae48>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7efc2a439518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.class_range.value_counts(normalize=True).plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df.price.value_counts?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method SeriesPlotMethods.bar of <pandas.plotting._core.SeriesPlotMethods object at 0x7efc2a19b080>>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.class_range.value_counts().plot.bar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(197, 27)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this brief analysis about prices, we found that:\n",
    "- the distribution is not normal - could be bimodal as well\n",
    "- there is no balance on price ranges, therefore we must take precautions when splitting the train/test sets\n",
    "\n",
    "Besides, please notice that this *class_range* feature was created only to show how unbalanced \n",
    "the price ranges are on this dataset. We are not going to use this *class_range* feature on our model because this information won't be present when predicting prices for new cars.\n",
    "\n",
    "Then again, we could chose to predict this *class_range* for each car instead of it's price. It's an easier task.\n",
    "\n",
    "\n",
    "### Discussion about outliers:\n",
    "\n",
    "There are data points which are outside of the expected range of the normal distribution of prices and therefore could be outliers.\n",
    "\n",
    "This happens either because they really are outliers or because this is not a normal distribution.\n",
    "\n",
    "We must test those data points because if they are real outliers, there is a change they could be influential points which are going to leverage the model.\n",
    "\n",
    "Lets see about that later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Balancing the data: bootstrap\n",
    "\n",
    "Our dataset has only 197 records and some classes are not well represented here.\n",
    "We will fix this balance issue through bootstrap: lets make our data grown by random sampling it:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 27)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_old = df.copy()\n",
    "df = df.sample(10000, replace=True)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7efc2a1e09e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax, ax2) = plt.subplots(ncols=2, sharey=False)\n",
    "\n",
    "df_old.price.plot(kind='kde', legend=False, ax=ax,  figsize=(14,7))\n",
    "df.price.plot(kind='kde',ax=ax2, figsize=(14,7))\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7efc277d0b00>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7efc2a1e0390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax, ax2) = plt.subplots(ncols=2, sharey=False)\n",
    "#(kind='kde', legend=False, ax=ax,  figsize=(14,7))\n",
    "df_old.class_range.value_counts().plot.bar(ax=ax, figsize=(14,7))\n",
    "df.class_range.value_counts().plot.bar(ax=ax2, figsize=(14,7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "almost_free        5007\n",
      "super-cheap        2390\n",
      "cheap              1302\n",
      "super_expensive     361\n",
      "expensive           338\n",
      "normal              245\n",
      "rich_only           152\n",
      "Name: class_range, dtype: int64 almost_free        101\n",
      "super-cheap         45\n",
      "cheap               26\n",
      "super_expensive      7\n",
      "expensive            6\n",
      "normal               5\n",
      "rich_only            3\n",
      "Name: class_range, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df.class_range.value_counts(), df_old.class_range.value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting the models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Since there is a lot of missing data for *normalized_losses*, \n",
    "# we chose to fit a model without this feature:\n",
    "\n",
    "X = df.copy()\n",
    "X.drop(['normalized_losses', 'class_range'], axis=1, inplace=True)\n",
    "X.dropna(subset=['price'], inplace=True)\n",
    "y = X.price\n",
    "X.drop('price', axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# now the split in a stratified way\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, \n",
    "                                                    random_state=95276, stratify=y)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### OLS with feature selection through analysis\n",
    "\n",
    "This is the proper way of fitting a OLS model: carefully choosing which feature will be included into the model, because:\n",
    "\n",
    "- including unnecessary features (that are correlated to the features already in the model) increases the standard error of the coefficients\n",
    "- excluding necessary features results in bias\n",
    "\n",
    "\n",
    "So, lets first look for correlation between features: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "num_feats = list(X_train.describe().columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['make',\n",
       " 'fuel_type',\n",
       " 'aspiration',\n",
       " 'num_of_doors',\n",
       " 'body_style',\n",
       " 'drive_wheels',\n",
       " 'engine_location',\n",
       " 'engine_type',\n",
       " 'num_of_cylinders',\n",
       " 'fuel_system']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_feats = list(X_train.columns)\n",
    "for feat in num_feats:\n",
    "    cat_feats.remove(feat)\n",
    "cat_feats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'price ~ C(make) + C(fuel_type) + C(aspiration) + C(num_of_doors) + C(body_style) + C(drive_wheels) + C(engine_location) + C(engine_type) + C(num_of_cylinders) + C(fuel_system)'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "formula = ''\n",
    "for feat in cat_feats:\n",
    "    formula = formula + ' + C({0})'.format(feat)\n",
    "formula = formula[2::]\n",
    "formula = 'price ~' + formula\n",
    "formula"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets add numeric features which are not correlated to each other:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wheel_base</th>\n",
       "      <th>length</th>\n",
       "      <th>width</th>\n",
       "      <th>curb_weight</th>\n",
       "      <th>engine_size</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>city_mpg</th>\n",
       "      <th>highway_mpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>symboling</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wheel_base</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.879800</td>\n",
       "      <td>0.810604</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>length</th>\n",
       "      <td>0.879800</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.856586</td>\n",
       "      <td>0.879958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>width</th>\n",
       "      <td>0.810604</td>\n",
       "      <td>0.856586</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.869088</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>height</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>curb_weight</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.879958</td>\n",
       "      <td>0.869088</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.859137</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>engine_size</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.859137</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.844174</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bore</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stroke</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>compression_ratio</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>horsepower</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.844174</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>peak_rpm</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>city_mpg</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.972683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>highway_mpg</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.972683</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   wheel_base    length     width  curb_weight  engine_size  \\\n",
       "symboling                 NaN       NaN       NaN          NaN          NaN   \n",
       "wheel_base                NaN  0.879800  0.810604          NaN          NaN   \n",
       "length               0.879800       NaN  0.856586     0.879958          NaN   \n",
       "width                0.810604  0.856586       NaN     0.869088          NaN   \n",
       "height                    NaN       NaN       NaN          NaN          NaN   \n",
       "curb_weight               NaN  0.879958  0.869088          NaN     0.859137   \n",
       "engine_size               NaN       NaN       NaN     0.859137          NaN   \n",
       "bore                      NaN       NaN       NaN          NaN          NaN   \n",
       "stroke                    NaN       NaN       NaN          NaN          NaN   \n",
       "compression_ratio         NaN       NaN       NaN          NaN          NaN   \n",
       "horsepower                NaN       NaN       NaN          NaN     0.844174   \n",
       "peak_rpm                  NaN       NaN       NaN          NaN          NaN   \n",
       "city_mpg                  NaN       NaN       NaN          NaN          NaN   \n",
       "highway_mpg               NaN       NaN       NaN          NaN          NaN   \n",
       "\n",
       "                   horsepower  city_mpg  highway_mpg  \n",
       "symboling                 NaN       NaN          NaN  \n",
       "wheel_base                NaN       NaN          NaN  \n",
       "length                    NaN       NaN          NaN  \n",
       "width                     NaN       NaN          NaN  \n",
       "height                    NaN       NaN          NaN  \n",
       "curb_weight               NaN       NaN          NaN  \n",
       "engine_size          0.844174       NaN          NaN  \n",
       "bore                      NaN       NaN          NaN  \n",
       "stroke                    NaN       NaN          NaN  \n",
       "compression_ratio         NaN       NaN          NaN  \n",
       "horsepower                NaN       NaN          NaN  \n",
       "peak_rpm                  NaN       NaN          NaN  \n",
       "city_mpg                  NaN       NaN     0.972683  \n",
       "highway_mpg               NaN  0.972683          NaN  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cor = X_train[num_feats].corr()\n",
    "df_cor = df_cor[df_cor>.8]\n",
    "df_cor = df_cor[df_cor!=1]\n",
    "df_cor.dropna(how='all', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['symboling',\n",
       " 'wheel_base',\n",
       " 'length',\n",
       " 'width',\n",
       " 'height',\n",
       " 'curb_weight',\n",
       " 'engine_size',\n",
       " 'bore',\n",
       " 'stroke',\n",
       " 'compression_ratio',\n",
       " 'horsepower',\n",
       " 'peak_rpm',\n",
       " 'city_mpg',\n",
       " 'highway_mpg']"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_feats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'price ~ C(make) + C(fuel_type) + C(aspiration) + C(num_of_doors) + C(body_style) + C(drive_wheels) + C(engine_location) + C(engine_type) + C(num_of_cylinders) + C(fuel_system) + symboling + wheel_base + height + engine_size + bore + stroke + compression_ratio + peak_rpm + city_mpg'"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#therefore:\n",
    "num_feats = ['symboling',\n",
    " 'wheel_base',\n",
    " 'height',\n",
    " 'engine_size',\n",
    " 'bore',\n",
    " 'stroke',\n",
    " 'compression_ratio',\n",
    " 'peak_rpm',\n",
    " 'city_mpg']\n",
    "\n",
    "\n",
    "formula2 = ' + '.join(num_feats)\n",
    "formula2 = formula + ' + ' + formula2\n",
    "formula2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/data/data-erick/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "X_train['price'] = y_train\n",
    "mod = smf.ols(formula=formula2, data=X_train)\n",
    "model_ols = mod.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.96003022206168109"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_ols.rsquared_adj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2602928.238875181"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ols_predictions = model_ols.predict(X_test)\n",
    "ols_mse = np.mean((ols_predictions - y_test)**2)\n",
    "ols_mse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With an adjusted R2R2 score of 0.96 we can say that it is a really good model already!\n",
    "\n",
    "\n",
    "### Adjusting this model - feature selection\n",
    "\n",
    "When we fit a linear regression model, we have to test the hypothesis that the evaluated coefficients for each regressor is actually zero.\n",
    "\n",
    "In other words, we have:\n",
    "- $H_0$: the coefficient is zero\n",
    "- $H_1$ : the coefficient is not zero\n",
    "\n",
    "Therefore, let's look into the p-values for each coefficient for each regressor to see if they shouldn't be zero:\n",
    "\n",
    "*if a p-value of a given coefficient is larger than 5%, then we fail to reject the null hypothesis that the coefficient actually is zero*\n",
    "\n",
    "However, all p-values here are smaller than 5%, so no additional feature selection will be done."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: float64)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_ols.pvalues[model_ols.pvalues>.05]\n",
    "# we are not taking out make or engine_type just because a few rotten apples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Regularized models - Ridge\n",
    "\n",
    "Now lets fit some models that uses regularization for feature selection. \n",
    "\n",
    "Ridge regression uses a penalty L2 factor for the least important regressors. \n",
    "\n",
    "- L2: least squared deviation $resid = \\sum{(y_i - \\hat y_i)^2} + \\lambda \\sum{\\beta^2}$\n",
    "\n",
    "However, the least squares regularization is not robust: it is sensitive to outliers.\n",
    "\n",
    "#### Normalization\n",
    "\n",
    "Preprocessing will be required here: features normalization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/data/data-erick/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "X_train.drop('price', axis=1, inplace=True)\n",
    "X_train_dummies = pd.get_dummies(X_train)\n",
    "dummies_for_later = X_train_dummies.head() # will be used for predicting NA prices\n",
    "X_test_dummies = pd.get_dummies(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "\n",
    "X_train_scaled = scaler.fit_transform(X_train_dummies)\n",
    "X_test_scaled = scaler.transform(X_test_dummies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import regression\n",
    "import time\n",
    "\n",
    "def regressor(model, set_train, set_test):\n",
    "    start_time = time.time()\n",
    "    model.fit(set_train, y_train)\n",
    "    y_predictions = model.predict(set_test)\n",
    "\n",
    "    print(str(model))\n",
    "    print(\"\\n--- %s seconds ---\" % round((time.time() - start_time),4))\n",
    "    print(\"\\nscore R2:\", round(model.score(set_test, y_test),4))\n",
    "\n",
    "    return print(\"MSE:\", regression.mean_squared_error(y_test, y_predictions))   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,\n",
      "   normalize=False, random_state=None, solver='auto', tol=0.001)\n",
      "\n",
      "--- 0.0142 seconds ---\n",
      "\n",
      "score R2: 0.9665\n",
      "MSE: 2198273.41053\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "\n",
    "model = Ridge()\n",
    "regressor(model, X_train_scaled, X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ridge(alpha=0.005, copy_X=True, fit_intercept=True, max_iter=None,\n",
      "   normalize=False, random_state=None, solver='auto', tol=0.001)\n",
      "\n",
      "--- 0.0119 seconds ---\n",
      "\n",
      "score R2: 0.967\n",
      "MSE: 2162600.41987\n"
     ]
    }
   ],
   "source": [
    "model = Ridge(alpha=0.005)\n",
    "regressor(model, X_train_scaled, X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=0.005, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "   normalize=False, random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# this is it\n",
    "model_ridge = Ridge(alpha=.005)\n",
    "model_ridge.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Regularized models - Lasso\n",
    "\n",
    "Lasso regression uses a stronger penalty for the least important regressors, the L1.\n",
    "\n",
    "That said, lasso will perform feature selection and it is not a stable solution.\n",
    "\n",
    "- L1: least absolute deviation $resid = \\sum{(y_i - \\hat y_i)^2} + \\lambda \\sum{|\\beta|}$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,\n",
      "   normalize=False, positive=False, precompute=False, random_state=None,\n",
      "   selection='cyclic', tol=0.0001, warm_start=False)\n",
      "\n",
      "--- 0.7902 seconds ---\n",
      "\n",
      "score R2: 0.9665\n",
      "MSE: 2194754.54834\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "model = Lasso()\n",
    "regressor(model, X_train_scaled, X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lasso(alpha=0.5, copy_X=True, fit_intercept=True, max_iter=10000,\n",
      "   normalize=False, positive=False, precompute=False, random_state=None,\n",
      "   selection='cyclic', tol=0.0001, warm_start=False)\n",
      "\n",
      "--- 0.8126 seconds ---\n",
      "\n",
      "score R2: 0.9669\n",
      "MSE: 2171336.23407\n"
     ]
    }
   ],
   "source": [
    "model = Lasso(alpha=.5, max_iter=10000)\n",
    "regressor(model, X_train_scaled, X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=0.5, copy_X=True, fit_intercept=True, max_iter=10000,\n",
       "   normalize=False, positive=False, precompute=False, random_state=None,\n",
       "   selection='cyclic', tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lasso = Lasso(alpha=.5, max_iter=10000)\n",
    "model_lasso.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Huber Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import HuberRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HuberRegressor(alpha=0.0001, epsilon=1.5, fit_intercept=True, max_iter=100,\n",
      "        tol=1e-05, warm_start=False)\n",
      "\n",
      "--- 0.4939 seconds ---\n",
      "\n",
      "score R2: 0.9611\n",
      "MSE: 2550082.29101\n"
     ]
    }
   ],
   "source": [
    "model = HuberRegressor(epsilon=1.5)\n",
    "regressor(model, X_train_scaled, X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HuberRegressor(alpha=0.0001, epsilon=2, fit_intercept=True, max_iter=100,\n",
      "        tol=1e-05, warm_start=False)\n",
      "\n",
      "--- 0.4371 seconds ---\n",
      "\n",
      "score R2: 0.9636\n",
      "MSE: 2382646.89839\n"
     ]
    }
   ],
   "source": [
    "model = HuberRegressor(epsilon=2)\n",
    "regressor(model, X_train_scaled, X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HuberRegressor(alpha=0.0001, epsilon=2, fit_intercept=True, max_iter=100,\n",
       "        tol=1e-05, warm_start=False)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_hubber = HuberRegressor(epsilon=2)\n",
    "model_hubber.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis of MSE - mean squared error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ols_predictions = model_ols.predict(X_test)\n",
    "ridge_predictions = model_ridge.predict(X_test_scaled)\n",
    "lasso_predictions = model_lasso.predict(X_test_scaled)\n",
    "huber_predictions = model_hubber.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>actual_price</th>\n",
       "      <th>hubber</th>\n",
       "      <th>lasso</th>\n",
       "      <th>model_ols</th>\n",
       "      <th>ridge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>7395.0</td>\n",
       "      <td>6507.84</td>\n",
       "      <td>6442.81</td>\n",
       "      <td>7123.13</td>\n",
       "      <td>6369.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>30760.0</td>\n",
       "      <td>30072.94</td>\n",
       "      <td>31635.43</td>\n",
       "      <td>32517.46</td>\n",
       "      <td>31701.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>12170.0</td>\n",
       "      <td>14188.13</td>\n",
       "      <td>14156.34</td>\n",
       "      <td>14314.24</td>\n",
       "      <td>14094.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>9279.0</td>\n",
       "      <td>8970.82</td>\n",
       "      <td>8789.88</td>\n",
       "      <td>8316.30</td>\n",
       "      <td>8832.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>8189.0</td>\n",
       "      <td>8674.67</td>\n",
       "      <td>8810.97</td>\n",
       "      <td>8743.16</td>\n",
       "      <td>8858.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>14869.0</td>\n",
       "      <td>13604.54</td>\n",
       "      <td>13845.94</td>\n",
       "      <td>13046.94</td>\n",
       "      <td>13818.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16500.0</td>\n",
       "      <td>15972.18</td>\n",
       "      <td>16128.17</td>\n",
       "      <td>15872.97</td>\n",
       "      <td>16166.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13495.0</td>\n",
       "      <td>15111.94</td>\n",
       "      <td>15152.75</td>\n",
       "      <td>15325.00</td>\n",
       "      <td>15179.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>40960.0</td>\n",
       "      <td>40341.01</td>\n",
       "      <td>42221.00</td>\n",
       "      <td>44095.96</td>\n",
       "      <td>42389.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13495.0</td>\n",
       "      <td>15111.94</td>\n",
       "      <td>15152.75</td>\n",
       "      <td>15325.00</td>\n",
       "      <td>15179.90</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     actual_price    hubber     lasso  model_ols     ridge\n",
       "54         7395.0   6507.84   6442.81    7123.13   6369.18\n",
       "15        30760.0  30072.94  31635.43   32517.46  31701.34\n",
       "133       12170.0  14188.13  14156.34   14314.24  14094.41\n",
       "88         9279.0   8970.82   8789.88    8316.30   8832.57\n",
       "86         8189.0   8674.67   8810.97    8743.16   8858.31\n",
       "83        14869.0  13604.54  13845.94   13046.94  13818.13\n",
       "2         16500.0  15972.18  16128.17   15872.97  16166.39\n",
       "0         13495.0  15111.94  15152.75   15325.00  15179.90\n",
       "73        40960.0  40341.01  42221.00   44095.96  42389.64\n",
       "0         13495.0  15111.94  15152.75   15325.00  15179.90"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_comparisson = pd.DataFrame({'model_ols': ols_predictions,\n",
    "                               'ridge': ridge_predictions,\n",
    "                               'lasso': lasso_predictions,\n",
    "                               'hubber': huber_predictions,\n",
    "                              'actual_price': y_test\n",
    "                             })\n",
    "df_comparisson.sample(10).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>actual_price</th>\n",
       "      <th>hubber</th>\n",
       "      <th>lasso</th>\n",
       "      <th>model_ols</th>\n",
       "      <th>ridge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1961.00</td>\n",
       "      <td>1961.00</td>\n",
       "      <td>1961.00</td>\n",
       "      <td>1961.00</td>\n",
       "      <td>1961.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>13321.54</td>\n",
       "      <td>13240.38</td>\n",
       "      <td>13325.40</td>\n",
       "      <td>13320.58</td>\n",
       "      <td>13325.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8097.30</td>\n",
       "      <td>7761.66</td>\n",
       "      <td>7947.07</td>\n",
       "      <td>7927.73</td>\n",
       "      <td>7959.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5118.00</td>\n",
       "      <td>4699.08</td>\n",
       "      <td>4450.71</td>\n",
       "      <td>3240.36</td>\n",
       "      <td>4386.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7738.00</td>\n",
       "      <td>7590.31</td>\n",
       "      <td>7630.98</td>\n",
       "      <td>7580.33</td>\n",
       "      <td>7554.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>10198.00</td>\n",
       "      <td>10750.51</td>\n",
       "      <td>10839.58</td>\n",
       "      <td>10685.36</td>\n",
       "      <td>10827.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>16558.00</td>\n",
       "      <td>16347.94</td>\n",
       "      <td>16596.28</td>\n",
       "      <td>16551.04</td>\n",
       "      <td>16489.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>45400.00</td>\n",
       "      <td>40341.01</td>\n",
       "      <td>42221.00</td>\n",
       "      <td>44095.96</td>\n",
       "      <td>42389.64</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       actual_price    hubber     lasso  model_ols     ridge\n",
       "count       1961.00   1961.00   1961.00    1961.00   1961.00\n",
       "mean       13321.54  13240.38  13325.40   13320.58  13325.26\n",
       "std         8097.30   7761.66   7947.07    7927.73   7959.52\n",
       "min         5118.00   4699.08   4450.71    3240.36   4386.02\n",
       "25%         7738.00   7590.31   7630.98    7580.33   7554.66\n",
       "50%        10198.00  10750.51  10839.58   10685.36  10827.57\n",
       "75%        16558.00  16347.94  16596.28   16551.04  16489.08\n",
       "max        45400.00  40341.01  42221.00   44095.96  42389.64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_comparisson.describe().round(2) # min and max prices are ok"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def get_mse(model):\n",
    "    return np.mean((df_comparisson[model] - df_comparisson.actual_price)**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ridge        2.162600e+06\n",
       "lasso        2.171336e+06\n",
       "hubber       2.382647e+06\n",
       "model_ols    2.718515e+06\n",
       "dtype: float64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_mse = pd.Series([get_mse('model_ols'),\n",
    "                     get_mse('ridge'), \n",
    "                     get_mse('lasso'), get_mse('hubber')],\n",
    "                   index=['model_ols', 'ridge', 'lasso', 'hubber'])\n",
    "all_mse.sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis of variance explained: $R^2$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "model_ridge     0.967000\n",
       "model_lasso     0.966866\n",
       "model_hubber    0.963642\n",
       "model_ols       0.957882\n",
       "dtype: float64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_r2adj = pd.Series([model_ols.rsquared_adj, \n",
    "                       model_ridge.score(X_test_scaled,y_test),\n",
    "                       model_lasso.score(X_test_scaled, y_test),\n",
    "                       model_hubber.score(X_test_scaled, y_test)\n",
    "                      ], \n",
    "          index=['model_ols', 'model_ridge', 'model_lasso', 'model_hubber'])\n",
    "\n",
    "all_r2adj.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Residual analysis\n",
    "\n",
    "In a good model, what we should expect from the residuals:\n",
    "- their mean should be zero\n",
    "- they should be homoscedastic\n",
    "- they should be normal\n",
    "- they should have no correlation with the fitted values\n",
    "- they should have no correlation with any of the features\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Residual mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.78165549903096e-09"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# OLS\n",
    "model_ols.resid.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-3.816629552082824e-13"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ridge\n",
    "model_ridge_resids = model_ridge.predict(X_train_scaled) - y_train\n",
    "model_ridge_resids.mean() # good!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-3.1393808187983397e-12"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lasso\n",
    "model_lasso_resids = model_lasso.predict(X_train_scaled) - y_train\n",
    "model_lasso_resids.mean() # good!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-85.61977381445658"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hubber\n",
    "model_hubber_resids = model_hubber.predict(X_train_scaled) - y_train\n",
    "model_hubber_resids.mean() # nope!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Residuals vs fitted values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f29f22469b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from numpy.polynomial.polynomial import polyfit\n",
    "\n",
    "plt.figure(figsize=(12,10))\n",
    "plt.subplot(2, 2, 1)\n",
    "plt.title('fitted price vs resids for all models')\n",
    "plt.scatter(model_ols.fittedvalues, model_ols.resid, c=\"g\", alpha=0.5, label=\"OLS model\")\n",
    "b, m = polyfit(model_ols.fittedvalues, model_ols.resid, 1)\n",
    "plt.plot(model_ols.fittedvalues, b + m * model_ols.fittedvalues, '-')\n",
    "plt.xlabel(\"\")\n",
    "plt.ylabel(\"\")\n",
    "plt.legend(loc=2)\n",
    "\n",
    "\n",
    "plt.subplot(2, 2, 2)\n",
    "plt.scatter(model_ridge.predict(X_train_scaled), model_ridge_resids, c=\"b\", alpha=0.5, label=\"Ridge model\")\n",
    "b, m = polyfit(model_ridge.predict(X_train_scaled), model_ridge_resids, 1)\n",
    "plt.plot(model_ridge.predict(X_train_scaled), b + m * model_ridge.predict(X_train_scaled), '-')\n",
    "plt.xlabel(\"\")\n",
    "plt.ylabel(\"\")\n",
    "plt.legend(loc=2)\n",
    "\n",
    "\n",
    "plt.subplot(2, 2, 3)\n",
    "plt.scatter(model_lasso.predict(X_train_scaled), model_lasso_resids, c=\"y\", alpha=0.5, label=\"Lasso model\")\n",
    "b, m = polyfit(model_lasso.predict(X_train_scaled), model_lasso_resids, 1)\n",
    "plt.plot(model_lasso.predict(X_train_scaled), b + m * model_lasso.predict(X_train_scaled), '-')\n",
    "plt.xlabel(\"\")\n",
    "plt.ylabel(\"\")\n",
    "plt.legend(loc=2)\n",
    "\n",
    "\n",
    "plt.subplot(2, 2, 4)\n",
    "plt.scatter(model_hubber.predict(X_train_scaled), model_hubber_resids, c=\"y\", alpha=0.5, label=\"Hubber model\")\n",
    "b, m = polyfit(model_hubber.predict(X_train_scaled), model_hubber_resids, 1)\n",
    "plt.plot(model_hubber.predict(X_train_scaled), b + m * model_hubber.predict(X_train_scaled), '-')\n",
    "plt.xlabel(\"\")\n",
    "plt.ylabel(\"\")\n",
    "plt.legend(loc=2)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hubber model residuals seems to have some correlation with $\\hat y$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.12243993567552305, 1.4273919551813508e-27)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats.stats import pearsonr\n",
    "\n",
    "pearsonr(model_hubber.predict(X_train_scaled), model_hubber_resids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nope, all ok for the Hubber model\n",
    "\n",
    "### Testing residuals for normality\n",
    "\n",
    "The Shapiro's test tests the null hypothesis of normality:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/data/data-erick/anaconda3/lib/python3.6/site-packages/scipy/stats/morestats.py:1326: UserWarning: p-value may not be accurate for N > 5000.\n",
      "  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9438661336898804, 0.0)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# OLS\n",
    "import scipy.stats as st\n",
    "st.shapiro(model_ols.resid) # normal!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/data/data-erick/anaconda3/lib/python3.6/site-packages/scipy/stats/morestats.py:1326: UserWarning: p-value may not be accurate for N > 5000.\n",
      "  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9460887312889099, 0.0)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ridge\n",
    "st.shapiro(model_ridge_resids) # normal..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/data/data-erick/anaconda3/lib/python3.6/site-packages/scipy/stats/morestats.py:1326: UserWarning: p-value may not be accurate for N > 5000.\n",
      "  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9407504796981812, 0.0)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lasso\n",
    "st.shapiro(model_lasso_resids) # normal too..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/data/data-erick/anaconda3/lib/python3.6/site-packages/scipy/stats/morestats.py:1326: UserWarning: p-value may not be accurate for N > 5000.\n",
      "  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.8604577779769897, 0.0)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hubber\n",
    "st.shapiro(model_hubber_resids) # normal too..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correlation between residuals and features\n",
    "\n",
    "In a good model, residuals cannot be correlated to any feature. \n",
    "\n",
    "Lets check that for the Ridge model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "symboling \n",
      " (3.6441610271369855e-06, 0.99974258919751702)\n",
      "wheel_base \n",
      " (-2.0675596464059233e-05, 0.99853955019311291)\n",
      "length \n",
      " (2.2590804097798883e-05, 0.99840426694859197)\n",
      "width \n",
      " (-1.7772296922306348e-05, 0.99874462857613455)\n",
      "height \n",
      " (8.7466404849492928e-06, 0.99938216857618778)\n",
      "curb_weight \n",
      " (-3.504893907803107e-05, 0.9975242714796041)\n",
      "engine_size \n",
      " (-7.349379064926162e-05, 0.99480869645886716)\n",
      "bore \n",
      " (1.2181498141385697e-05, 0.99913954255004234)\n",
      "stroke \n",
      " (7.9863932311714522e-06, 0.99943586935799111)\n",
      "compression_ratio \n",
      " (2.6364431257605819e-05, 0.99813771200073198)\n",
      "horsepower \n",
      " (1.9678279487423009e-06, 0.99986099962751818)\n",
      "peak_rpm \n",
      " (-1.371111023920585e-05, 0.99903149594698415)\n",
      "city_mpg \n",
      " (4.8072830800238043e-06, 0.99966043070927313)\n",
      "highway_mpg \n",
      " (-1.4047195296974865e-05, 0.99900775626311067)\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats.stats import pearsonr\n",
    "\n",
    "\n",
    "all_num_feats = list(X_train.describe().columns)\n",
    "for feat in all_num_feats:\n",
    "    print(feat, \"\\n\", pearsonr(X_train[feat], model_ridge_resids))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All ok here: there is no correlation between resids and any of the features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correlation between residuals and $\\hat y$\n",
    "\n",
    "In a good model, residuals cannot be correlated to the fitted values. \n",
    "\n",
    "We have already saw before that the Ridge is ok in his regard:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.00010617461659072249, 0.992500312880084)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats.stats import pearsonr\n",
    "pearsonr(model_ridge.predict(X_train_scaled), model_ridge_resids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitted values distribution analysis\n",
    "\n",
    "We expect that the fitted values follows the same distribution of the original prices.\n",
    "\n",
    "Lets see about that for the Ridge Model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f29ea391cc0>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f29f220aa90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, (ax, ax2) = plt.subplots(ncols=2, sharey=False)\n",
    "\n",
    "X_scaled = pd.get_dummies(X)\n",
    "X_scaled = scaler.transform(X_scaled)\n",
    "all_prices_pred = model_ridge.predict(X_scaled)\n",
    "\n",
    "pd.Series(all_prices_pred).plot(kind='kde', legend=False, ax=ax,  figsize=(14,7), title='fitted y')\n",
    "pd.Series(y).plot(kind='kde', legend=False, figsize=(14,7), title='original y')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Most important features\n",
    "\n",
    "### Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coefs_abs</th>\n",
       "      <th>coefs_value</th>\n",
       "      <th>feats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>26537.49</td>\n",
       "      <td>26537.49</td>\n",
       "      <td>engine_size</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>16505.82</td>\n",
       "      <td>16505.82</td>\n",
       "      <td>curb_weight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>15195.11</td>\n",
       "      <td>-15195.11</td>\n",
       "      <td>compression_ratio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9591.46</td>\n",
       "      <td>-9591.46</td>\n",
       "      <td>length</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8486.31</td>\n",
       "      <td>8486.31</td>\n",
       "      <td>wheel_base</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7495.75</td>\n",
       "      <td>7495.75</td>\n",
       "      <td>width</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>6047.05</td>\n",
       "      <td>6047.05</td>\n",
       "      <td>peak_rpm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>5726.00</td>\n",
       "      <td>5726.00</td>\n",
       "      <td>highway_mpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5435.42</td>\n",
       "      <td>-5435.42</td>\n",
       "      <td>bore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>5185.45</td>\n",
       "      <td>5185.45</td>\n",
       "      <td>num_of_cylinders_three</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    coefs_abs  coefs_value                   feats\n",
       "6    26537.49     26537.49             engine_size\n",
       "5    16505.82     16505.82             curb_weight\n",
       "9    15195.11    -15195.11       compression_ratio\n",
       "2     9591.46     -9591.46                  length\n",
       "1     8486.31      8486.31              wheel_base\n",
       "3     7495.75      7495.75                   width\n",
       "11    6047.05      6047.05                peak_rpm\n",
       "13    5726.00      5726.00             highway_mpg\n",
       "7     5435.42     -5435.42                    bore\n",
       "59    5185.45      5185.45  num_of_cylinders_three"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_coef_ridge = pd.DataFrame({'feats': pd.get_dummies(X).columns,\n",
    "                              'coefs_abs': np.abs(np.round(model_ridge.coef_,2)),\n",
    "                              'coefs_value': np.round(model_ridge.coef_,2)})\n",
    "df_coef_ridge[~df_coef_ridge.feats.str.startswith('make')].sort_values('coefs_abs', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coefs_abs</th>\n",
       "      <th>coefs_value</th>\n",
       "      <th>feats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>24796.37</td>\n",
       "      <td>24796.37</td>\n",
       "      <td>engine_size</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15886.63</td>\n",
       "      <td>15886.63</td>\n",
       "      <td>curb_weight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>12267.44</td>\n",
       "      <td>-12267.44</td>\n",
       "      <td>compression_ratio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>10125.39</td>\n",
       "      <td>10125.39</td>\n",
       "      <td>fuel_type_diesel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>9559.07</td>\n",
       "      <td>-9559.07</td>\n",
       "      <td>engine_location_front</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8650.65</td>\n",
       "      <td>-8650.65</td>\n",
       "      <td>length</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7815.88</td>\n",
       "      <td>7815.88</td>\n",
       "      <td>wheel_base</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7369.02</td>\n",
       "      <td>7369.02</td>\n",
       "      <td>width</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>6623.57</td>\n",
       "      <td>6623.57</td>\n",
       "      <td>num_of_cylinders_three</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5831.79</td>\n",
       "      <td>5831.79</td>\n",
       "      <td>peak_rpm</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    coefs_abs  coefs_value                   feats\n",
       "6    24796.37     24796.37             engine_size\n",
       "5    15886.63     15886.63             curb_weight\n",
       "9    12267.44    -12267.44       compression_ratio\n",
       "35   10125.39     10125.39        fuel_type_diesel\n",
       "48    9559.07     -9559.07   engine_location_front\n",
       "2     8650.65     -8650.65                  length\n",
       "1     7815.88      7815.88              wheel_base\n",
       "3     7369.02      7369.02                   width\n",
       "59    6623.57      6623.57  num_of_cylinders_three\n",
       "11    5831.79      5831.79                peak_rpm"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_coef_lasso = pd.DataFrame({'feats': pd.get_dummies(X).columns,\n",
    "                              'coefs_abs': np.abs(np.round(model_lasso.coef_,2)),\n",
    "                              'coefs_value': np.round(model_lasso.coef_,2)})\n",
    "df_coef_lasso[~df_coef_lasso.feats.str.startswith('make')].sort_values('coefs_abs', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### OLS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coef_value</th>\n",
       "      <th>coefs_abs</th>\n",
       "      <th>feats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>C(fuel_system)[T.idi]</th>\n",
       "      <td>10350.37</td>\n",
       "      <td>10350.37</td>\n",
       "      <td>C(fuel_system)[T.idi]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(fuel_system)[T.spfi]</th>\n",
       "      <td>7076.78</td>\n",
       "      <td>7076.78</td>\n",
       "      <td>C(fuel_system)[T.spfi]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(make)[T.porsche]</th>\n",
       "      <td>6833.08</td>\n",
       "      <td>6833.08</td>\n",
       "      <td>C(make)[T.porsche]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(num_of_cylinders)[T.twelve]</th>\n",
       "      <td>-6420.79</td>\n",
       "      <td>6420.79</td>\n",
       "      <td>C(num_of_cylinders)[T.twelve]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>6184.20</td>\n",
       "      <td>6184.20</td>\n",
       "      <td>Intercept</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(make)[T.isuzu]</th>\n",
       "      <td>-5587.34</td>\n",
       "      <td>5587.34</td>\n",
       "      <td>C(make)[T.isuzu]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(make)[T.bmw]</th>\n",
       "      <td>5472.98</td>\n",
       "      <td>5472.98</td>\n",
       "      <td>C(make)[T.bmw]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(make)[T.plymouth]</th>\n",
       "      <td>-4686.91</td>\n",
       "      <td>4686.91</td>\n",
       "      <td>C(make)[T.plymouth]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(make)[T.dodge]</th>\n",
       "      <td>-4607.82</td>\n",
       "      <td>4607.82</td>\n",
       "      <td>C(make)[T.dodge]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(make)[T.mercedes-benz]</th>\n",
       "      <td>4473.15</td>\n",
       "      <td>4473.15</td>\n",
       "      <td>C(make)[T.mercedes-benz]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               coef_value  coefs_abs  \\\n",
       "C(fuel_system)[T.idi]            10350.37   10350.37   \n",
       "C(fuel_system)[T.spfi]            7076.78    7076.78   \n",
       "C(make)[T.porsche]                6833.08    6833.08   \n",
       "C(num_of_cylinders)[T.twelve]    -6420.79    6420.79   \n",
       "Intercept                         6184.20    6184.20   \n",
       "C(make)[T.isuzu]                 -5587.34    5587.34   \n",
       "C(make)[T.bmw]                    5472.98    5472.98   \n",
       "C(make)[T.plymouth]              -4686.91    4686.91   \n",
       "C(make)[T.dodge]                 -4607.82    4607.82   \n",
       "C(make)[T.mercedes-benz]          4473.15    4473.15   \n",
       "\n",
       "                                                       feats  \n",
       "C(fuel_system)[T.idi]                  C(fuel_system)[T.idi]  \n",
       "C(fuel_system)[T.spfi]                C(fuel_system)[T.spfi]  \n",
       "C(make)[T.porsche]                        C(make)[T.porsche]  \n",
       "C(num_of_cylinders)[T.twelve]  C(num_of_cylinders)[T.twelve]  \n",
       "Intercept                                          Intercept  \n",
       "C(make)[T.isuzu]                            C(make)[T.isuzu]  \n",
       "C(make)[T.bmw]                                C(make)[T.bmw]  \n",
       "C(make)[T.plymouth]                      C(make)[T.plymouth]  \n",
       "C(make)[T.dodge]                            C(make)[T.dodge]  \n",
       "C(make)[T.mercedes-benz]            C(make)[T.mercedes-benz]  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = model_ols.pvalues[model_ols.pvalues<.05].index\n",
    "\n",
    "coefs = model_ols.params[index]\n",
    "\n",
    "df_coef_ols = pd.DataFrame({'coefs_abs': np.abs(np.round(coefs,2)),\n",
    "                            'coef_value': np.round(coefs,2),\n",
    "                            'feats': coefs.index})\n",
    "\n",
    "df_coef_ols[~df_coef_ols.feats.str.startswith('make')].sort_values('coefs_abs', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing the models - conclusions\n",
    "\n",
    "- residual analysis shows better results for the ridge and lasso models: their residual means are closer to zero (not normal though)\n",
    "- all models have no correlation between fitted values and residuals\n",
    "- MSE analysis shows better results for the Ridge model: smallest MSE\n",
    "- $R^2$ analysis shows better results for the Ridge model\n",
    "- OLS model gets a pretty close score to Ridge but it uses only 20 features, while Ridge uses 24\n",
    "\n",
    "\n",
    " \n",
    "## Machine Learning models\n",
    "\n",
    "### Decision Trees\n",
    "\n",
    "We could try fitting machine learning models too. Lets quickly train an decision tree regressor to compare to our previous models:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeRegressor(criterion='mse', max_depth=15, max_features=None,\n",
      "           max_leaf_nodes=185, min_impurity_decrease=0.0,\n",
      "           min_impurity_split=None, min_samples_leaf=5,\n",
      "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "           presort=False, random_state=95276, splitter='best')\n",
      "\n",
      "--- 0.0592 seconds ---\n",
      "\n",
      "score R2: 0.9988\n",
      "MSE: 78275.8642876\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "model = DecisionTreeRegressor(random_state=95276, min_samples_leaf=5,\n",
    "                             max_depth=15, max_leaf_nodes=185)\n",
    "#model = DecisionTreeRegressor(random_state=95276)\n",
    "regressor(model, X_train_dummies, X_test_dummies)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(criterion='mse', max_depth=15, max_features=None,\n",
       "           max_leaf_nodes=185, min_impurity_decrease=0.0,\n",
       "           min_impurity_split=None, min_samples_leaf=5,\n",
       "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "           presort=False, random_state=95276, splitter='best')"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_tree = DecisionTreeRegressor(random_state=95276, min_samples_leaf=5,\n",
    "                             max_depth=15, max_leaf_nodes=185)\n",
    "model_tree.fit(X_train_dummies, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model_tree_predictions = model_tree.predict(X_test_dummies)\n",
    "model_tree_r2 = model_tree.score(X_test_dummies, y_test)\n",
    "model_tree_mse = regression.mean_squared_error(y_test, model_tree_predictions) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tree_predictions = tree.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forests\n",
    "\n",
    "Random Forests are ensemble machine learning methods. \n",
    "\n",
    "Ensemble methods are a combination of predictions from several learning algorithm. This makes them robust (not sensitive to outliers) and with improved power of generalization. \n",
    "\n",
    "In particular, Random Forests is a averaging ensemble method: several estimators are built independently and then the predictions are averaged. This reduces variance and thus they perform better than any single estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
      "           max_features=5, max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
      "           min_impurity_split=None, min_samples_leaf=1,\n",
      "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "           n_estimators=100, n_jobs=3, oob_score=False, random_state=95276,\n",
      "           verbose=0, warm_start=False)\n",
      "\n",
      "--- 0.4373 seconds ---\n",
      "\n",
      "score R2: 0.9988\n",
      "MSE: 78162.6694765\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "model = RandomForestRegressor(random_state=95276, n_jobs=3, max_features=5,\n",
    "                             n_estimators=100)\n",
    "regressor(model, X_train_dummies, X_test_dummies)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "           max_features=5, max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "           min_impurity_split=None, min_samples_leaf=1,\n",
       "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "           n_estimators=100, n_jobs=3, oob_score=False, random_state=95276,\n",
       "           verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_rf = RandomForestRegressor(random_state=95276, n_jobs=3, max_features=5,\n",
    "                             n_estimators=100)\n",
    "model_rf.fit(X_train_dummies, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model_rf_predictions = model_rf.predict(X_test_dummies)\n",
    "model_rf_r2 = model_rf.score(X_test_dummies, y_test)\n",
    "model_rf_mse = regression.mean_squared_error(y_test, model_rf_predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gradient tree boosting\n",
    "\n",
    "Gradient tree boosting are ensemble machine learning methods also, but this time we have the boosting class: several weak models are combined to produce a powerful estimator with reduced bias.\n",
    "\n",
    "This method is very robust because it uses regularization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GradientBoostingRegressor(alpha=0.3, criterion='friedman_mse', init=None,\n",
      "             learning_rate=0.1, loss='ls', max_depth=15, max_features=10,\n",
      "             max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
      "             min_impurity_split=None, min_samples_leaf=5,\n",
      "             min_samples_split=5, min_weight_fraction_leaf=0.0,\n",
      "             n_estimators=150, presort='auto', random_state=95276,\n",
      "             subsample=1.0, verbose=0, warm_start=False)\n",
      "\n",
      "--- 4.1596 seconds ---\n",
      "\n",
      "score R2: 0.9988\n",
      "MSE: 78275.8674881\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "model = GradientBoostingRegressor(random_state=95276, max_features=10, max_depth=15,\n",
    "                                 alpha=.3, min_samples_leaf=5, min_samples_split=5, \n",
    "                                  n_estimators=150)\n",
    "regressor(model, X_train_dummies, X_test_dummies)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingRegressor(alpha=0.3, criterion='friedman_mse', init=None,\n",
       "             learning_rate=0.1, loss='ls', max_depth=15, max_features=10,\n",
       "             max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "             min_impurity_split=None, min_samples_leaf=5,\n",
       "             min_samples_split=5, min_weight_fraction_leaf=0.0,\n",
       "             n_estimators=150, presort='auto', random_state=95276,\n",
       "             subsample=1.0, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_gb = GradientBoostingRegressor(random_state=95276, max_features=10, max_depth=15,\n",
    "                                 alpha=.3, min_samples_leaf=5, min_samples_split=5, \n",
    "                                  n_estimators=150)\n",
    "model_gb.fit(X_train_dummies, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model_gb_predictions = model_gb.predict(X_test_dummies)\n",
    "model_gb_r2 = model_gb.score(X_test_dummies, y_test)\n",
    "model_gb_mse = regression.mean_squared_error(y_test, model_gb_predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### AdaBoost\n",
    "\n",
    "Adaboost is another ensemble machine learning method of the boosting class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=15, max_features=None,\n",
      "           max_leaf_nodes=185, min_impurity_decrease=0.0,\n",
      "           min_impurity_split=None, min_samples_leaf=5,\n",
      "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "           presort=False, random_state=95276, splitter='best'),\n",
      "         learning_rate=0.2, loss='linear', n_estimators=100,\n",
      "         random_state=95276)\n",
      "\n",
      "--- 1.1027 seconds ---\n",
      "\n",
      "score R2: 0.9988\n",
      "MSE: 78309.3163565\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import AdaBoostRegressor\n",
    "model = AdaBoostRegressor(random_state=95276, n_estimators=100, base_estimator=model_tree,\n",
    "                         learning_rate=.2)\n",
    "regressor(model, X_train_dummies, X_test_dummies)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even without tunning any parameters for the model, we could achieve a really good MSE and $R^2$ score. This looks promising.\n",
    "\n",
    "### Adding features\n",
    "\n",
    "Another thing to consider: adding information about the age and original price of each car. This certainly would help getting better predictions.\n",
    "\n",
    "As a matter of fact, the *normalized-losses* feature could be pointing that way. \n",
    "Let's quickly build another model that will consider it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#All of the part 1, cleaning, in one function!\n",
    "def make_df_set(df, cat=1, dropna=1):\n",
    "\n",
    "    df.columns = df.columns.str.replace(\"-\", \"_\")\n",
    "    df.replace(to_replace=\"?\", value= np.NaN, inplace=True)\n",
    "    \n",
    "    if dropna==1:\n",
    "        df.dropna(inplace=True)\n",
    "        \n",
    "    df.drive_wheels.replace(\"4wd\", \"fwd\", inplace=True)\n",
    "    df.engine_type.replace('dohcv', 'dohc', inplace=True)\n",
    "\n",
    "    rep_map = {'mfi': 'mpfi'}\n",
    "\n",
    "    df.fuel_system.replace(rep_map, inplace=True)\n",
    "    \n",
    "    float_cols = ['symboling', 'normalized_losses',  'wheel_base', 'length', \n",
    "              'width', 'height', 'curb_weight', 'engine_size', \n",
    "              'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm',\n",
    "              'city_mpg', 'highway_mpg', 'price']\n",
    "    \n",
    "    for col in float_cols:\n",
    "        df[col] = df[col].astype('float')\n",
    "\n",
    "    category_cols = ['make', 'fuel_type', 'aspiration','num_of_cylinders',\n",
    "           'num_of_doors', 'body_style', 'drive_wheels', 'engine_location',\n",
    "           'fuel_system', 'engine_type']\n",
    "    \n",
    "    if cat==1:\n",
    "        for col in category_cols:\n",
    "            df[col] = df[col].astype('category')\n",
    "        \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"Auto1-DS-TestData.csv\")\n",
    "\n",
    "df = make_df_set(df)\n",
    "df = df.sample(10000, replace=True) # for balancing classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X = df\n",
    "y = df.price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, \n",
    "                                                    random_state=95276, stratify=y)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### OLS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'price ~ C(make) + C(fuel_type) + C(aspiration) + C(num_of_doors) + C(body_style) + C(drive_wheels) + C(engine_location) + C(engine_type) + C(num_of_cylinders) + C(fuel_system) + symboling + wheel_base + height + engine_size + bore + stroke + compression_ratio + peak_rpm + city_mpg + normalized_losses'"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "formula3 = formula2 + ' + normalized_losses'\n",
    "formula3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.96696497039418172"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod = smf.ols(formula=formula3, data=X_train)\n",
    "\n",
    "model_ols_nlosses = mod.fit()\n",
    "model_ols_nlosses.rsquared_adj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prices_pred_model_ols_nlosses = model_ols_nlosses.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/data/data-erick/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/data/data-erick/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"\n"
     ]
    }
   ],
   "source": [
    "########\n",
    "scaler2 = MinMaxScaler()\n",
    "\n",
    "X_train.drop('price', axis=1, inplace=True)\n",
    "X_test.drop('price', axis=1, inplace=True)\n",
    "\n",
    "X_train_dummies = pd.get_dummies(X_train)\n",
    "X_test_dummies = pd.get_dummies(X_test)\n",
    "\n",
    "X_train_scaled = scaler2.fit_transform(X_train_dummies)\n",
    "X_test_scaled = scaler2.transform(X_test_dummies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ridge(alpha=0.06, copy_X=True, fit_intercept=True, max_iter=None,\n",
      "   normalize=False, random_state=None, solver='auto', tol=0.001)\n",
      "\n",
      "--- 0.0126 seconds ---\n",
      "\n",
      "score R2: 0.973\n",
      "MSE: 914660.316789\n"
     ]
    }
   ],
   "source": [
    "# using this cell to explore alpha values\n",
    "model = Ridge(alpha=.06)\n",
    "regressor(model, X_train_scaled, X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.97339171276582726"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_ridge_nlosses = Ridge(alpha=.06)\n",
    "model_ridge_nlosses.fit(X_train_scaled, y_train)\n",
    "model_ridge_nlosses.score(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ridge_pred_nlosses = model_ridge_nlosses.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# one last look at decision trees\n",
    "tree_nlosses = DecisionTreeRegressor(random_state=95276).fit(X_train_dummies, y_train)\n",
    "tree_nlosses_pred = tree_nlosses.predict(X_test_dummies)\n",
    "round(tree_nlosses.score(X_test_dummies, y_test),2) # WOW!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>actual_price</th>\n",
       "      <th>ols_nlosses</th>\n",
       "      <th>ridge_nlosses</th>\n",
       "      <th>tree_nlosses</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>9279.0</td>\n",
       "      <td>9795.10</td>\n",
       "      <td>9872.35</td>\n",
       "      <td>9279.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>13415.0</td>\n",
       "      <td>15174.54</td>\n",
       "      <td>15231.43</td>\n",
       "      <td>13415.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>7799.0</td>\n",
       "      <td>7139.65</td>\n",
       "      <td>7234.07</td>\n",
       "      <td>7799.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>18280.0</td>\n",
       "      <td>15574.52</td>\n",
       "      <td>15962.27</td>\n",
       "      <td>18280.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>6989.0</td>\n",
       "      <td>8346.15</td>\n",
       "      <td>8372.50</td>\n",
       "      <td>6989.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>8249.0</td>\n",
       "      <td>7394.87</td>\n",
       "      <td>7816.37</td>\n",
       "      <td>8249.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>11694.0</td>\n",
       "      <td>12262.58</td>\n",
       "      <td>12103.81</td>\n",
       "      <td>11694.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>6529.0</td>\n",
       "      <td>7164.98</td>\n",
       "      <td>7404.96</td>\n",
       "      <td>6529.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>15510.0</td>\n",
       "      <td>13910.27</td>\n",
       "      <td>14294.12</td>\n",
       "      <td>15510.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>9258.0</td>\n",
       "      <td>7689.40</td>\n",
       "      <td>7676.63</td>\n",
       "      <td>9258.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>11199.0</td>\n",
       "      <td>10412.51</td>\n",
       "      <td>10733.48</td>\n",
       "      <td>11199.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>8195.0</td>\n",
       "      <td>8926.16</td>\n",
       "      <td>8805.59</td>\n",
       "      <td>8195.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>16900.0</td>\n",
       "      <td>16469.29</td>\n",
       "      <td>16420.88</td>\n",
       "      <td>17439.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>8358.0</td>\n",
       "      <td>7880.99</td>\n",
       "      <td>7488.21</td>\n",
       "      <td>8358.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>7295.0</td>\n",
       "      <td>7736.52</td>\n",
       "      <td>7038.64</td>\n",
       "      <td>7295.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>11850.0</td>\n",
       "      <td>13586.86</td>\n",
       "      <td>13147.28</td>\n",
       "      <td>11850.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>7395.0</td>\n",
       "      <td>7744.56</td>\n",
       "      <td>7332.85</td>\n",
       "      <td>7395.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>7609.0</td>\n",
       "      <td>6756.13</td>\n",
       "      <td>7119.51</td>\n",
       "      <td>7126.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>35056.0</td>\n",
       "      <td>35056.00</td>\n",
       "      <td>35053.98</td>\n",
       "      <td>35056.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>7295.0</td>\n",
       "      <td>7736.52</td>\n",
       "      <td>7038.64</td>\n",
       "      <td>7295.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     actual_price  ols_nlosses  ridge_nlosses  tree_nlosses\n",
       "87         9279.0      9795.10        9872.35       9279.00\n",
       "195       13415.0     15174.54       15231.43      13415.00\n",
       "95         7799.0      7139.65        7234.07       7799.00\n",
       "65        18280.0     15574.52       15962.27      18280.00\n",
       "85         6989.0      8346.15        8372.50       6989.00\n",
       "98         8249.0      7394.87        7816.37       8249.00\n",
       "149       11694.0     12262.58       12103.81      11694.00\n",
       "33         6529.0      7164.98        7404.96       6529.00\n",
       "135       15510.0     13910.27       14294.12      15510.00\n",
       "162        9258.0      7689.40        7676.63       9258.00\n",
       "170       11199.0     10412.51       10733.48      11199.00\n",
       "185        8195.0      8926.16        8805.59       8195.00\n",
       "112       16900.0     16469.29       16420.88      17439.72\n",
       "161        8358.0      7880.99        7488.21       8358.00\n",
       "36         7295.0      7736.52        7038.64       7295.00\n",
       "132       11850.0     13586.86       13147.28      11850.00\n",
       "54         7395.0      7744.56        7332.85       7395.00\n",
       "26         7609.0      6756.13        7119.51       7126.37\n",
       "72        35056.0     35056.00       35053.98      35056.00\n",
       "36         7295.0      7736.52        7038.64       7295.00"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_comparisson = pd.DataFrame({'ols_nlosses': prices_pred_model_ols_nlosses,\n",
    "                              'ridge_nlosses': ridge_pred_nlosses,\n",
    "                               'tree_nlosses': tree_nlosses_pred,\n",
    "                                 'actual_price': y_test\n",
    "                                })\n",
    "\n",
    "df_comparisson.sample(20).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>actual_price</th>\n",
       "      <th>ols_nlosses</th>\n",
       "      <th>ridge_nlosses</th>\n",
       "      <th>tree_nlosses</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2000.00</td>\n",
       "      <td>2000.00</td>\n",
       "      <td>2000.00</td>\n",
       "      <td>2000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>11403.52</td>\n",
       "      <td>11404.34</td>\n",
       "      <td>11405.45</td>\n",
       "      <td>11407.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5820.08</td>\n",
       "      <td>5722.21</td>\n",
       "      <td>5739.88</td>\n",
       "      <td>5816.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5118.00</td>\n",
       "      <td>4953.09</td>\n",
       "      <td>4787.97</td>\n",
       "      <td>5118.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7395.00</td>\n",
       "      <td>7273.15</td>\n",
       "      <td>7411.94</td>\n",
       "      <td>7349.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>9095.00</td>\n",
       "      <td>9092.35</td>\n",
       "      <td>9291.55</td>\n",
       "      <td>9279.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>14399.00</td>\n",
       "      <td>15161.67</td>\n",
       "      <td>15050.32</td>\n",
       "      <td>14399.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>35056.00</td>\n",
       "      <td>35056.00</td>\n",
       "      <td>35053.98</td>\n",
       "      <td>35056.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       actual_price  ols_nlosses  ridge_nlosses  tree_nlosses\n",
       "count       2000.00      2000.00        2000.00       2000.00\n",
       "mean       11403.52     11404.34       11405.45      11407.24\n",
       "std         5820.08      5722.21        5739.88       5816.48\n",
       "min         5118.00      4953.09        4787.97       5118.00\n",
       "25%         7395.00      7273.15        7411.94       7349.00\n",
       "50%         9095.00      9092.35        9291.55       9279.00\n",
       "75%        14399.00     15161.67       15050.32      14399.00\n",
       "max        35056.00     35056.00       35053.98      35056.00"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_comparisson.describe().round(2) # checking for min and max prices here: problems for ols_nlosses!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tree_nlosses     2.714063e+04\n",
       "ridge_nlosses    9.146603e+05\n",
       "ols_nlosses      1.125123e+06\n",
       "ridge            2.027869e+06\n",
       "lasso            2.035205e+06\n",
       "hubber           2.268078e+06\n",
       "model_ols        2.559538e+06\n",
       "dtype: float64"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_models_mse = pd.Series([get_mse('ols_nlosses'), get_mse('ridge_nlosses'),\n",
    "                           get_mse('tree_nlosses')],\n",
    "                   index=['ols_nlosses', 'ridge_nlosses', 'tree_nlosses'])\n",
    "\n",
    "all_mse_new = pd.concat([all_mse, new_models_mse])\n",
    "all_mse_new.sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final thoughts\n",
    "\n",
    "- adding information about normalized losses really helps the all the models!\n",
    "- machine learning with decision trees achieves the bests MSE\n",
    "- among the linear regression models, Ridge is the best one\n",
    "- OLS with feature selection should really be taken into consideration, because it achieves pretty close scores with less features\n",
    "- the prices predicted by all models follows a bimodal distribution, just like the original prices\n",
    "- with more time, additional supervised learning methods would be tested\n",
    "- with more time, data would be tested for outliers\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Using the best model for predicting NA prices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symboling</th>\n",
       "      <th>normalized_losses</th>\n",
       "      <th>make</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>aspiration</th>\n",
       "      <th>num_of_doors</th>\n",
       "      <th>body_style</th>\n",
       "      <th>drive_wheels</th>\n",
       "      <th>engine_location</th>\n",
       "      <th>wheel_base</th>\n",
       "      <th>...</th>\n",
       "      <th>engine_size</th>\n",
       "      <th>fuel_system</th>\n",
       "      <th>bore</th>\n",
       "      <th>stroke</th>\n",
       "      <th>compression_ratio</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>peak_rpm</th>\n",
       "      <th>city_mpg</th>\n",
       "      <th>highway_mpg</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>audi</td>\n",
       "      <td>gas</td>\n",
       "      <td>turbo</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>99.5</td>\n",
       "      <td>...</td>\n",
       "      <td>131.0</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.13</td>\n",
       "      <td>3.40</td>\n",
       "      <td>7.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>isuzu</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>94.5</td>\n",
       "      <td>...</td>\n",
       "      <td>90.0</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>3.03</td>\n",
       "      <td>3.11</td>\n",
       "      <td>9.6</td>\n",
       "      <td>70.0</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>isuzu</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>94.5</td>\n",
       "      <td>...</td>\n",
       "      <td>90.0</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>3.03</td>\n",
       "      <td>3.11</td>\n",
       "      <td>9.6</td>\n",
       "      <td>70.0</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>porsche</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>98.4</td>\n",
       "      <td>...</td>\n",
       "      <td>203.0</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.94</td>\n",
       "      <td>3.11</td>\n",
       "      <td>10.0</td>\n",
       "      <td>288.0</td>\n",
       "      <td>5750.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     symboling  normalized_losses     make fuel_type aspiration num_of_doors  \\\n",
       "9          0.0                NaN     audi       gas      turbo          two   \n",
       "44         1.0                NaN    isuzu       gas        std          two   \n",
       "45         0.0                NaN    isuzu       gas        std         four   \n",
       "129        1.0                NaN  porsche       gas        std          two   \n",
       "\n",
       "    body_style drive_wheels engine_location  wheel_base  ...    engine_size  \\\n",
       "9    hatchback          fwd           front        99.5  ...          131.0   \n",
       "44       sedan          fwd           front        94.5  ...           90.0   \n",
       "45       sedan          fwd           front        94.5  ...           90.0   \n",
       "129  hatchback          rwd           front        98.4  ...          203.0   \n",
       "\n",
       "     fuel_system  bore  stroke compression_ratio horsepower  peak_rpm  \\\n",
       "9           mpfi  3.13    3.40               7.0      160.0    5500.0   \n",
       "44          2bbl  3.03    3.11               9.6       70.0    5400.0   \n",
       "45          2bbl  3.03    3.11               9.6       70.0    5400.0   \n",
       "129         mpfi  3.94    3.11              10.0      288.0    5750.0   \n",
       "\n",
       "    city_mpg  highway_mpg  price  \n",
       "9       16.0         22.0    NaN  \n",
       "44      38.0         43.0    NaN  \n",
       "45      38.0         43.0    NaN  \n",
       "129     17.0         28.0    NaN  \n",
       "\n",
       "[4 rows x 26 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_predict = pd.read_csv(\"Auto1-DS-TestData.csv\")\n",
    "df_predict = make_df_set(df_predict, cat=0, dropna=0)\n",
    "\n",
    "df_predict = df_predict[df_predict.price.isna()]\n",
    "df_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Since all normalized_losses here are NAs, \n",
    "#lets drop them and use the best model that doesn't consider them:\n",
    "df = df_predict.drop('normalized_losses', axis=1).copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df)\n",
    "df = df.reindex(columns = dummies_for_later.columns, fill_value=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symboling</th>\n",
       "      <th>wheel_base</th>\n",
       "      <th>length</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>curb_weight</th>\n",
       "      <th>engine_size</th>\n",
       "      <th>bore</th>\n",
       "      <th>stroke</th>\n",
       "      <th>compression_ratio</th>\n",
       "      <th>...</th>\n",
       "      <th>num_of_cylinders_four</th>\n",
       "      <th>num_of_cylinders_six</th>\n",
       "      <th>num_of_cylinders_three</th>\n",
       "      <th>num_of_cylinders_twelve</th>\n",
       "      <th>fuel_system_1bbl</th>\n",
       "      <th>fuel_system_2bbl</th>\n",
       "      <th>fuel_system_idi</th>\n",
       "      <th>fuel_system_mpfi</th>\n",
       "      <th>fuel_system_spdi</th>\n",
       "      <th>fuel_system_spfi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0</td>\n",
       "      <td>99.5</td>\n",
       "      <td>178.2</td>\n",
       "      <td>67.9</td>\n",
       "      <td>52.0</td>\n",
       "      <td>3053.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>3.13</td>\n",
       "      <td>3.40</td>\n",
       "      <td>7.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>1.0</td>\n",
       "      <td>94.5</td>\n",
       "      <td>155.9</td>\n",
       "      <td>63.6</td>\n",
       "      <td>52.0</td>\n",
       "      <td>1874.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>3.03</td>\n",
       "      <td>3.11</td>\n",
       "      <td>9.6</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>0.0</td>\n",
       "      <td>94.5</td>\n",
       "      <td>155.9</td>\n",
       "      <td>63.6</td>\n",
       "      <td>52.0</td>\n",
       "      <td>1909.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>3.03</td>\n",
       "      <td>3.11</td>\n",
       "      <td>9.6</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>1.0</td>\n",
       "      <td>98.4</td>\n",
       "      <td>175.7</td>\n",
       "      <td>72.3</td>\n",
       "      <td>50.5</td>\n",
       "      <td>3366.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>3.94</td>\n",
       "      <td>3.11</td>\n",
       "      <td>10.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 67 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     symboling  wheel_base  length  width  height  curb_weight  engine_size  \\\n",
       "9          0.0        99.5   178.2   67.9    52.0       3053.0        131.0   \n",
       "44         1.0        94.5   155.9   63.6    52.0       1874.0         90.0   \n",
       "45         0.0        94.5   155.9   63.6    52.0       1909.0         90.0   \n",
       "129        1.0        98.4   175.7   72.3    50.5       3366.0        203.0   \n",
       "\n",
       "     bore  stroke  compression_ratio        ...         num_of_cylinders_four  \\\n",
       "9    3.13    3.40                7.0        ...                             0   \n",
       "44   3.03    3.11                9.6        ...                             1   \n",
       "45   3.03    3.11                9.6        ...                             1   \n",
       "129  3.94    3.11               10.0        ...                             0   \n",
       "\n",
       "     num_of_cylinders_six  num_of_cylinders_three  num_of_cylinders_twelve  \\\n",
       "9                       0                       0                        0   \n",
       "44                      0                       0                        0   \n",
       "45                      0                       0                        0   \n",
       "129                     0                       0                        0   \n",
       "\n",
       "     fuel_system_1bbl  fuel_system_2bbl  fuel_system_idi  fuel_system_mpfi  \\\n",
       "9                   0                 0                0                 1   \n",
       "44                  0                 1                0                 0   \n",
       "45                  0                 1                0                 0   \n",
       "129                 0                 0                0                 1   \n",
       "\n",
       "     fuel_system_spdi  fuel_system_spfi  \n",
       "9                   0                 0  \n",
       "44                  0                 0  \n",
       "45                  0                 0  \n",
       "129                 0                 0  \n",
       "\n",
       "[4 rows x 67 columns]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_scaled = scaler.transform(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 23092.16201465,   7466.7928181 ,   8236.34505236,  37058.91512718])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices = model_ridge.predict(df_scaled)\n",
    "prices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symboling</th>\n",
       "      <th>normalized_losses</th>\n",
       "      <th>make</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>aspiration</th>\n",
       "      <th>num_of_doors</th>\n",
       "      <th>body_style</th>\n",
       "      <th>drive_wheels</th>\n",
       "      <th>engine_location</th>\n",
       "      <th>wheel_base</th>\n",
       "      <th>...</th>\n",
       "      <th>fuel_system</th>\n",
       "      <th>bore</th>\n",
       "      <th>stroke</th>\n",
       "      <th>compression_ratio</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>peak_rpm</th>\n",
       "      <th>city_mpg</th>\n",
       "      <th>highway_mpg</th>\n",
       "      <th>price</th>\n",
       "      <th>prices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>audi</td>\n",
       "      <td>gas</td>\n",
       "      <td>turbo</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>99.5</td>\n",
       "      <td>...</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.13</td>\n",
       "      <td>3.40</td>\n",
       "      <td>7.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23092.162015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>isuzu</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>94.5</td>\n",
       "      <td>...</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>3.03</td>\n",
       "      <td>3.11</td>\n",
       "      <td>9.6</td>\n",
       "      <td>70.0</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7466.792818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>isuzu</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>94.5</td>\n",
       "      <td>...</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>3.03</td>\n",
       "      <td>3.11</td>\n",
       "      <td>9.6</td>\n",
       "      <td>70.0</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8236.345052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>porsche</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>98.4</td>\n",
       "      <td>...</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.94</td>\n",
       "      <td>3.11</td>\n",
       "      <td>10.0</td>\n",
       "      <td>288.0</td>\n",
       "      <td>5750.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37058.915127</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     symboling  normalized_losses     make fuel_type aspiration num_of_doors  \\\n",
       "9          0.0                NaN     audi       gas      turbo          two   \n",
       "44         1.0                NaN    isuzu       gas        std          two   \n",
       "45         0.0                NaN    isuzu       gas        std         four   \n",
       "129        1.0                NaN  porsche       gas        std          two   \n",
       "\n",
       "    body_style drive_wheels engine_location  wheel_base      ...       \\\n",
       "9    hatchback          fwd           front        99.5      ...        \n",
       "44       sedan          fwd           front        94.5      ...        \n",
       "45       sedan          fwd           front        94.5      ...        \n",
       "129  hatchback          rwd           front        98.4      ...        \n",
       "\n",
       "     fuel_system  bore  stroke  compression_ratio horsepower peak_rpm  \\\n",
       "9           mpfi  3.13    3.40                7.0      160.0   5500.0   \n",
       "44          2bbl  3.03    3.11                9.6       70.0   5400.0   \n",
       "45          2bbl  3.03    3.11                9.6       70.0   5400.0   \n",
       "129         mpfi  3.94    3.11               10.0      288.0   5750.0   \n",
       "\n",
       "     city_mpg highway_mpg  price        prices  \n",
       "9        16.0        22.0    NaN  23092.162015  \n",
       "44       38.0        43.0    NaN   7466.792818  \n",
       "45       38.0        43.0    NaN   8236.345052  \n",
       "129      17.0        28.0    NaN  37058.915127  \n",
       "\n",
       "[4 rows x 27 columns]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_predict['prices'] = prices\n",
    "df_predict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Is this prediction ok?\n",
    "\n",
    "Lets see median prices from the original df:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['audi', 'isuzu', 'porsche']"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "makers = list(df_predict.make.unique())\n",
    "makers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['make',\n",
       " 'fuel_type',\n",
       " 'aspiration',\n",
       " 'num_of_doors',\n",
       " 'body_style',\n",
       " 'drive_wheels',\n",
       " 'engine_location',\n",
       " 'engine_type',\n",
       " 'num_of_cylinders',\n",
       " 'fuel_system']"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"Auto1-DS-TestData.csv\")\n",
    "df = make_df_set(df, cat=0)\n",
    "\n",
    "feats = [feat for feat in cat_feats if not feat.startswith('make')]\n",
    "feats.insert(0, 'make')\n",
    "feats # group by those feats and them look for median price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>make</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>aspiration</th>\n",
       "      <th>num_of_doors</th>\n",
       "      <th>body_style</th>\n",
       "      <th>drive_wheels</th>\n",
       "      <th>engine_location</th>\n",
       "      <th>engine_type</th>\n",
       "      <th>num_of_cylinders</th>\n",
       "      <th>fuel_system</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">audi</th>\n",
       "      <th rowspan=\"3\" valign=\"top\">gas</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">std</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">four</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">sedan</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">fwd</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">front</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">ohc</th>\n",
       "      <th>five</th>\n",
       "      <th>mpfi</th>\n",
       "      <td>17580.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>four</th>\n",
       "      <th>mpfi</th>\n",
       "      <td>13950.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>turbo</th>\n",
       "      <th>four</th>\n",
       "      <th>sedan</th>\n",
       "      <th>fwd</th>\n",
       "      <th>front</th>\n",
       "      <th>ohc</th>\n",
       "      <th>five</th>\n",
       "      <th>mpfi</th>\n",
       "      <td>23875.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>porsche</th>\n",
       "      <th>gas</th>\n",
       "      <th>std</th>\n",
       "      <th>two</th>\n",
       "      <th>hatchback</th>\n",
       "      <th>rwd</th>\n",
       "      <th>front</th>\n",
       "      <th>ohc</th>\n",
       "      <th>four</th>\n",
       "      <th>mpfi</th>\n",
       "      <td>22018.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                              price\n",
       "make    fuel_type aspiration num_of_doors body_style drive_wheels engine_location engine_type num_of_cylinders fuel_system         \n",
       "audi    gas       std        four         sedan      fwd          front           ohc         five             mpfi         17580.0\n",
       "                                                                                              four             mpfi         13950.0\n",
       "                  turbo      four         sedan      fwd          front           ohc         five             mpfi         23875.0\n",
       "porsche gas       std        two          hatchback  rwd          front           ohc         four             mpfi         22018.0"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_makers = df[df.make.isin(makers)]\n",
    "\n",
    "df_medians = df_makers.groupby(feats)[['price']].median()\n",
    "df_medians"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>make</th>\n",
       "      <th>aspiration</th>\n",
       "      <th>prices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>audi</td>\n",
       "      <td>turbo</td>\n",
       "      <td>23092.162015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>isuzu</td>\n",
       "      <td>std</td>\n",
       "      <td>7466.792818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>isuzu</td>\n",
       "      <td>std</td>\n",
       "      <td>8236.345052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>porsche</td>\n",
       "      <td>std</td>\n",
       "      <td>37058.915127</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        make aspiration        prices\n",
       "9       audi      turbo  23092.162015\n",
       "44     isuzu        std   7466.792818\n",
       "45     isuzu        std   8236.345052\n",
       "129  porsche        std  37058.915127"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_predict[['make', 'aspiration', 'prices']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Well, we can see that:\n",
    "- predictions are ok for audi\n",
    "- predictions are not ok for porsche (because we need more different porsches on training set)\n",
    "- as we don't have any information for isuzu, maybe would be wise to not predict prices for it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Thanks,\n",
    "\n",
    "*erickfis@gmail.com*"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
