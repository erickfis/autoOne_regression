{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear regression - OLS Model\n",
    "\n",
    "In this section, we will cover:\n",
    "\n",
    "- fitting an OLS linear regression model\n",
    "- score analysis: MSE and variance explained: $R^2$\n",
    "- residual analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pickle\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symboling</th>\n",
       "      <th>make</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>aspiration</th>\n",
       "      <th>num_of_doors</th>\n",
       "      <th>body_style</th>\n",
       "      <th>drive_wheels</th>\n",
       "      <th>engine_location</th>\n",
       "      <th>wheel_base</th>\n",
       "      <th>length</th>\n",
       "      <th>...</th>\n",
       "      <th>engine_size</th>\n",
       "      <th>fuel_system</th>\n",
       "      <th>bore</th>\n",
       "      <th>stroke</th>\n",
       "      <th>compression_ratio</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>peak_rpm</th>\n",
       "      <th>city_mpg</th>\n",
       "      <th>highway_mpg</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>mitsubishi</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>93.7</td>\n",
       "      <td>157.3</td>\n",
       "      <td>...</td>\n",
       "      <td>92</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>2.97</td>\n",
       "      <td>3.23</td>\n",
       "      <td>9.4</td>\n",
       "      <td>68.0</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>37</td>\n",
       "      <td>41</td>\n",
       "      <td>5389.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>dodge</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>93.7</td>\n",
       "      <td>157.3</td>\n",
       "      <td>...</td>\n",
       "      <td>90</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>2.97</td>\n",
       "      <td>3.23</td>\n",
       "      <td>9.4</td>\n",
       "      <td>68.0</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>31</td>\n",
       "      <td>38</td>\n",
       "      <td>6692.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>jaguar</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>sedan</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>102.0</td>\n",
       "      <td>191.7</td>\n",
       "      <td>...</td>\n",
       "      <td>326</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.54</td>\n",
       "      <td>2.76</td>\n",
       "      <td>11.5</td>\n",
       "      <td>262.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "      <td>36000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>peugot</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>107.9</td>\n",
       "      <td>186.7</td>\n",
       "      <td>...</td>\n",
       "      <td>120</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.46</td>\n",
       "      <td>3.19</td>\n",
       "      <td>8.4</td>\n",
       "      <td>97.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>19</td>\n",
       "      <td>24</td>\n",
       "      <td>11900.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>subaru</td>\n",
       "      <td>gas</td>\n",
       "      <td>turbo</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>97.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>...</td>\n",
       "      <td>108</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.62</td>\n",
       "      <td>2.64</td>\n",
       "      <td>7.7</td>\n",
       "      <td>111.0</td>\n",
       "      <td>4800.0</td>\n",
       "      <td>24</td>\n",
       "      <td>29</td>\n",
       "      <td>11259.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   symboling        make fuel_type aspiration num_of_doors body_style  \\\n",
       "0          2  mitsubishi       gas        std          two  hatchback   \n",
       "1          1       dodge       gas        std         four      sedan   \n",
       "2          0      jaguar       gas        std          two      sedan   \n",
       "3          0      peugot       gas        std         four      sedan   \n",
       "4          0      subaru       gas      turbo         four      sedan   \n",
       "\n",
       "  drive_wheels engine_location  wheel_base  length  ...  engine_size  \\\n",
       "0          fwd           front        93.7   157.3  ...           92   \n",
       "1          fwd           front        93.7   157.3  ...           90   \n",
       "2          rwd           front       102.0   191.7  ...          326   \n",
       "3          rwd           front       107.9   186.7  ...          120   \n",
       "4          fwd           front        97.0   172.0  ...          108   \n",
       "\n",
       "   fuel_system  bore stroke compression_ratio  horsepower peak_rpm  city_mpg  \\\n",
       "0         2bbl  2.97   3.23               9.4        68.0   5500.0        37   \n",
       "1         2bbl  2.97   3.23               9.4        68.0   5500.0        31   \n",
       "2         mpfi  3.54   2.76              11.5       262.0   5000.0        13   \n",
       "3         mpfi  3.46   3.19               8.4        97.0   5000.0        19   \n",
       "4         mpfi  3.62   2.64               7.7       111.0   4800.0        24   \n",
       "\n",
       "   highway_mpg    price  \n",
       "0           41   5389.0  \n",
       "1           38   6692.0  \n",
       "2           17  36000.0  \n",
       "3           24  11900.0  \n",
       "4           29  11259.0  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('data/df_resample.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 25 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   symboling          10000 non-null  int64  \n",
      " 1   make               10000 non-null  object \n",
      " 2   fuel_type          10000 non-null  object \n",
      " 3   aspiration         10000 non-null  object \n",
      " 4   num_of_doors       10000 non-null  object \n",
      " 5   body_style         10000 non-null  object \n",
      " 6   drive_wheels       10000 non-null  object \n",
      " 7   engine_location    10000 non-null  object \n",
      " 8   wheel_base         10000 non-null  float64\n",
      " 9   length             10000 non-null  float64\n",
      " 10  width              10000 non-null  float64\n",
      " 11  height             10000 non-null  float64\n",
      " 12  curb_weight        10000 non-null  int64  \n",
      " 13  engine_type        10000 non-null  object \n",
      " 14  num_of_cylinders   10000 non-null  object \n",
      " 15  engine_size        10000 non-null  int64  \n",
      " 16  fuel_system        10000 non-null  object \n",
      " 17  bore               10000 non-null  float64\n",
      " 18  stroke             10000 non-null  float64\n",
      " 19  compression_ratio  10000 non-null  float64\n",
      " 20  horsepower         10000 non-null  float64\n",
      " 21  peak_rpm           10000 non-null  float64\n",
      " 22  city_mpg           10000 non-null  int64  \n",
      " 23  highway_mpg        10000 non-null  int64  \n",
      " 24  price              10000 non-null  float64\n",
      "dtypes: float64(10), int64(5), object(10)\n",
      "memory usage: 1.9+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train-test split\n",
    "\n",
    "To avoid overfitting, we will split our data on train and test sets.\n",
    "\n",
    "The model will be trained with the train dataset and later we will evaluate it with the test set.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = df.copy()\n",
    "X.drop('price', axis=1, inplace=True)\n",
    "y = np.log(df.price) # as discussed, we are going to use the log transformation here\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=.3, random_state=95276\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Selection\n",
    "\n",
    "It is very important to carefully chose which features will be included into the model, because:\n",
    "\n",
    "- including unnecessary features increases the standard error of the coefficients\n",
    "- excluding necessary features results in bias\n",
    "\n",
    "### Selection through correlation\n",
    "\n",
    "We will start selecting features through their correlation with the dependent variable price: if it has correlation, the feature will be included in the model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['wheel_base',\n",
       " 'length',\n",
       " 'width',\n",
       " 'height',\n",
       " 'curb_weight',\n",
       " 'engine_size',\n",
       " 'bore',\n",
       " 'stroke',\n",
       " 'compression_ratio',\n",
       " 'horsepower',\n",
       " 'peak_rpm',\n",
       " 'city_mpg',\n",
       " 'highway_mpg']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# categorical features\n",
    "with open('data/category_list', 'rb') as file:\n",
    "    cat_cols = pickle.load(file)\n",
    "\n",
    "# numeric columns\n",
    "num_cols = [col for col in X_train.columns if col not in cat_cols]\n",
    "num_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\BJ571WQ\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "bore           0.598414\n",
       "wheel_base     0.613096\n",
       "length         0.771923\n",
       "city_mpg       0.786216\n",
       "highway_mpg    0.787066\n",
       "width          0.792462\n",
       "horsepower     0.825041\n",
       "engine_size    0.848821\n",
       "curb_weight    0.886872\n",
       "price          1.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train['price'] = y_train\n",
    "cols = num_cols + ['price']\n",
    "cor = X_train[cols].corr().abs()\n",
    "cor.loc[cor.price > .5, 'price'].sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "correlated:  Index(['bore', 'wheel_base', 'length', 'city_mpg', 'highway_mpg', 'width',\n",
      "       'horsepower', 'engine_size', 'curb_weight'],\n",
      "      dtype='object')\n",
      "not correlated:  ['height', 'stroke', 'compression_ratio', 'peak_rpm']\n"
     ]
    }
   ],
   "source": [
    "mask = (cor.price > .5 ) & (cor.price < 1)\n",
    "correlated = cor[mask].sort_values(by='price').index\n",
    "not_correlated = [col for col in num_cols if col not in correlated]\n",
    "\n",
    "print('correlated: ', correlated)\n",
    "print('not correlated: ', not_correlated)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting the model\n",
    "### Formula for OLS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'price ~ C(make) + C(fuel_type) + C(aspiration) + C(num_of_doors) + C(body_style) + C(drive_wheels) + C(engine_location) + C(engine_type) + C(num_of_cylinders) + C(fuel_system) + C(symboling) + bore + wheel_base + length + city_mpg + highway_mpg + width + horsepower + engine_size + curb_weight'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_list = [f'C({cat})' for cat in cat_cols]\n",
    "cat_formula = ' + '.join(cat_list)\n",
    "num_formula = ' + '.join(correlated)\n",
    "\n",
    "formula = f'price ~ {cat_formula} + {num_formula}'\n",
    "formula"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.969\n",
      "Model:                            OLS   Adj. R-squared:                  0.969\n",
      "Method:                 Least Squares   F-statistic:                     3974.\n",
      "Date:                Sun, 05 Jul 2020   Prob (F-statistic):               0.00\n",
      "Time:                        17:32:34   Log-Likelihood:                 7310.9\n",
      "No. Observations:                7000   AIC:                        -1.451e+04\n",
      "Df Residuals:                    6944   BIC:                        -1.413e+04\n",
      "Df Model:                          55                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=================================================================================================\n",
      "                                    coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------------------\n",
      "Intercept                         4.6632      0.069     68.022      0.000       4.529       4.798\n",
      "C(make)[T.audi]                   0.2956      0.019     15.375      0.000       0.258       0.333\n",
      "C(make)[T.bmw]                    0.3424      0.017     20.031      0.000       0.309       0.376\n",
      "C(make)[T.chevrolet]             -0.0681      0.017     -3.992      0.000      -0.102      -0.035\n",
      "C(make)[T.dodge]                 -0.1279      0.013     -9.512      0.000      -0.154      -0.102\n",
      "C(make)[T.honda]                  0.1801      0.017     10.442      0.000       0.146       0.214\n",
      "C(make)[T.isuzu]                 -0.4496      0.020    -21.959      0.000      -0.490      -0.409\n",
      "C(make)[T.jaguar]                -0.0461      0.023     -2.045      0.041      -0.090      -0.002\n",
      "C(make)[T.mazda]                 -0.0055      0.013     -0.415      0.678      -0.031       0.020\n",
      "C(make)[T.mercedes-benz]          0.0272      0.020      1.374      0.169      -0.012       0.066\n",
      "C(make)[T.mercury]               -0.0428      0.022     -1.935      0.053      -0.086       0.001\n",
      "C(make)[T.mitsubishi]            -0.1235      0.014     -8.977      0.000      -0.150      -0.097\n",
      "C(make)[T.nissan]                 0.0136      0.013      1.071      0.284      -0.011       0.038\n",
      "C(make)[T.peugot]                -0.2410      0.015    -16.161      0.000      -0.270      -0.212\n",
      "C(make)[T.plymouth]              -0.1567      0.013    -11.827      0.000      -0.183      -0.131\n",
      "C(make)[T.porsche]                0.3308      0.023     14.121      0.000       0.285       0.377\n",
      "C(make)[T.saab]                   0.1715      0.016     10.707      0.000       0.140       0.203\n",
      "C(make)[T.subaru]                -0.2159      0.013    -16.104      0.000      -0.242      -0.190\n",
      "C(make)[T.toyota]                -0.1388      0.012    -11.412      0.000      -0.163      -0.115\n",
      "C(make)[T.volkswagen]            -0.0227      0.014     -1.620      0.105      -0.050       0.005\n",
      "C(make)[T.volvo]                 -0.0245      0.016     -1.539      0.124      -0.056       0.007\n",
      "C(fuel_type)[T.gas]               2.2090      0.034     64.306      0.000       2.142       2.276\n",
      "C(aspiration)[T.turbo]            0.1450      0.006     23.509      0.000       0.133       0.157\n",
      "C(num_of_doors)[T.two]           -0.0467      0.004    -10.799      0.000      -0.055      -0.038\n",
      "C(body_style)[T.hardtop]         -0.1813      0.010    -18.215      0.000      -0.201      -0.162\n",
      "C(body_style)[T.hatchback]       -0.1730      0.009    -19.543      0.000      -0.190      -0.156\n",
      "C(body_style)[T.sedan]           -0.1713      0.010    -17.712      0.000      -0.190      -0.152\n",
      "C(body_style)[T.wagon]           -0.2424      0.010    -23.417      0.000      -0.263      -0.222\n",
      "C(drive_wheels)[T.rwd]            0.1974      0.006     30.737      0.000       0.185       0.210\n",
      "C(engine_location)[T.rear]        0.3251      0.016     19.825      0.000       0.293       0.357\n",
      "C(engine_type)[T.l]              -0.1174      0.013     -8.956      0.000      -0.143      -0.092\n",
      "C(engine_type)[T.ohc]            -0.0469      0.009     -5.183      0.000      -0.065      -0.029\n",
      "C(engine_type)[T.ohcf]            0.1092      0.008     12.869      0.000       0.093       0.126\n",
      "C(engine_type)[T.ohcv]           -0.0731      0.010     -7.206      0.000      -0.093      -0.053\n",
      "C(num_of_cylinders)[T.five]      -0.1078      0.023     -4.660      0.000      -0.153      -0.062\n",
      "C(num_of_cylinders)[T.four]      -0.0978      0.029     -3.387      0.001      -0.154      -0.041\n",
      "C(num_of_cylinders)[T.six]       -0.1420      0.021     -6.704      0.000      -0.184      -0.101\n",
      "C(num_of_cylinders)[T.three]      0.1236      0.023      5.424      0.000       0.079       0.168\n",
      "C(num_of_cylinders)[T.twelve]     0.0422      0.031      1.352      0.176      -0.019       0.103\n",
      "C(fuel_system)[T.2bbl]            0.2101      0.013     16.521      0.000       0.185       0.235\n",
      "C(fuel_system)[T.idi]             2.4543      0.036     68.950      0.000       2.384       2.524\n",
      "C(fuel_system)[T.mfi]             0.3084      0.022     13.772      0.000       0.264       0.352\n",
      "C(fuel_system)[T.mpfi]            0.3012      0.013     22.682      0.000       0.275       0.327\n",
      "C(fuel_system)[T.spdi]            0.2448      0.015     15.895      0.000       0.215       0.275\n",
      "C(fuel_system)[T.spfi]            0.6067      0.026     23.575      0.000       0.556       0.657\n",
      "C(symboling)[T.-1]                0.0912      0.010      8.811      0.000       0.071       0.111\n",
      "C(symboling)[T.0]                 0.0977      0.012      8.436      0.000       0.075       0.120\n",
      "C(symboling)[T.1]                 0.0058      0.012      0.475      0.635      -0.018       0.030\n",
      "C(symboling)[T.2]                -0.0021      0.013     -0.166      0.868      -0.027       0.023\n",
      "C(symboling)[T.3]                 0.0956      0.014      7.016      0.000       0.069       0.122\n",
      "bore                             -0.1315      0.015     -8.541      0.000      -0.162      -0.101\n",
      "wheel_base                        0.0075      0.001      9.770      0.000       0.006       0.009\n",
      "length                           -0.0031      0.000     -7.449      0.000      -0.004      -0.002\n",
      "city_mpg                         -0.0193      0.001    -18.415      0.000      -0.021      -0.017\n",
      "highway_mpg                       0.0134      0.001     14.778      0.000       0.012       0.015\n",
      "width                             0.0236      0.002     12.433      0.000       0.020       0.027\n",
      "horsepower                       -0.0004      0.000     -2.489      0.013      -0.001   -9.17e-05\n",
      "engine_size                       0.0014      0.000      6.032      0.000       0.001       0.002\n",
      "curb_weight                       0.0004   1.11e-05     36.620      0.000       0.000       0.000\n",
      "==============================================================================\n",
      "Omnibus:                       43.470   Durbin-Watson:                   2.040\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               39.363\n",
      "Skew:                          -0.142   Prob(JB):                     2.83e-09\n",
      "Kurtosis:                       2.766   Cond. No.                     1.02e+16\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The smallest eigenvalue is 4.53e-22. This might indicate that there are\n",
      "strong multicollinearity problems or that the design matrix is singular.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "\n",
    "start = time.time()\n",
    "model = smf.ols(formula=formula, data=X_train)\n",
    "stop = time.time()\n",
    "\n",
    "elapsed = stop - start\n",
    "res = model.fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## More feature selection: p-values\n",
    "\n",
    "When we fit a linear regression model, we have to test the hypothesis that the evaluated coefficients for each regressor is actually zero, meaning we don't need the regressor at all.\n",
    "\n",
    "In other words, we have:\n",
    "\n",
    "- $H_0$: the coefficient is zero\n",
    "- $H_1$: the coefficient is not zero\n",
    "\n",
    "Therefore, let's look into the p-values for each coefficient for each regressor to understand if they should be zero:\n",
    "\n",
    "*if a p-value of a given coefficient is larger than 5%, then we fail to reject the null hypothesis that the coefficient actually is zero*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "C(make)[T.mazda]                 0.678023\n",
       "C(make)[T.mercedes-benz]         0.169382\n",
       "C(make)[T.mercury]               0.053000\n",
       "C(make)[T.nissan]                0.284175\n",
       "C(make)[T.volkswagen]            0.105253\n",
       "C(make)[T.volvo]                 0.123909\n",
       "C(num_of_cylinders)[T.twelve]    0.176399\n",
       "C(symboling)[T.1]                0.635092\n",
       "C(symboling)[T.2]                0.868250\n",
       "dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.pvalues[res.pvalues > .05]\n",
    "# we are not taking out make just because a few rotten apples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, only the p-values for some makers are larger than 5%. We are not removing this feature.\n",
    "\n",
    "All other p-values are smaller than 5%, so no additional feature selection will be done."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Scoring & Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R^2: 0.969\n",
      "MSE: 1.211e+06\n"
     ]
    }
   ],
   "source": [
    "r2 = res.rsquared_adj\n",
    "\n",
    "predictions = np.exp(res.predict(X_test)) # back transformation\n",
    "mse = np.mean(\n",
    "    (predictions - np.exp(y_test))**2\n",
    ")\n",
    "\n",
    "print(f'R^2: {r2:.4}')\n",
    "print(f'MSE: {mse:.4}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model name</th>\n",
       "      <th>r2</th>\n",
       "      <th>MSE</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ols</td>\n",
       "      <td>0.968962</td>\n",
       "      <td>1.211086e+06</td>\n",
       "      <td>0.701995</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  model name        r2           MSE      time\n",
       "0        ols  0.968962  1.211086e+06  0.701995"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = {\n",
    "    'model name': ['ols'],\n",
    "    'r2': [r2],\n",
    "    'MSE': [mse],\n",
    "    'time': elapsed\n",
    "       }\n",
    "\n",
    "score_df = pd.DataFrame(data)\n",
    "score_df.to_csv('data/scores.csv', index=False)\n",
    "score_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "## Residual analysis\n",
    "\n",
    "In a good model, we should expect that the residuals:\n",
    "\n",
    "- have mean zero\n",
    "- to be homoscedastic\n",
    "- to be normal\n",
    "- to have no correlation with the fitted values\n",
    "- to have no correlation with any of the features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Residual mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.466027465037769e-13"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.resid.mean() # good!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Residuals vs fitted values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1a7827ec8c8>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from numpy.polynomial.polynomial import polyfit\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.title('fitted price vs resids')\n",
    "plt.scatter(res.fittedvalues, res.resid, c=\"g\", alpha=0.5, label=\"OLS model\")\n",
    "b, m = polyfit(res.fittedvalues, res.resid, 1)\n",
    "plt.plot(res.fittedvalues, b + m * res.fittedvalues, '-')\n",
    "plt.xlabel(\"\")\n",
    "plt.ylabel(\"\")\n",
    "plt.legend(loc=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correlation between residuals and $\\hat y$\n",
    "\n",
    "In a good model, residuals cannot be correlated to the fitted values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7.525074313674551e-13, 0.9999999999534074)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats.stats import pearsonr\n",
    "pearsonr(res.predict(X_train), res.resid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test for normality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\BJ571WQ\\Anaconda3\\lib\\site-packages\\scipy\\stats\\morestats.py:1676: UserWarning: p-value may not be accurate for N > 5000.\n",
      "  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9936643838882446, 4.235666338594954e-17)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scipy.stats as st\n",
    "st.shapiro(res.resid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from statsmodels.graphics.gofplots import qqplot\n",
    "\n",
    "qqplot(res.resid, line='s');"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
